// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: nft.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Representation of a Hedera Token Service NFT in the network Merkle tree.
type Nft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The id of this NFT.
	NftId *NftID `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	// *
	// The account or contract id that owns this NFT.
	//
	// If this number is zero in state, the NFT is owned by its token type's current treasury.
	OwnerId *AccountID `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// *
	// The account or contract id approved to spend this NFT.
	//
	// If this number is zero, there is no approved spender.
	SpenderId *AccountID `protobuf:"bytes,3,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
	// *
	// The consensus time of the TokenMint that created this NFT.
	MintTime *Timestamp `protobuf:"bytes,4,opt,name=mint_time,json=mintTime,proto3" json:"mint_time,omitempty"`
	// *
	// The metadata of this NFT, up to 100 bytes; usually the UTF-8 encoding of a URI.
	Metadata []byte `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// *
	// If the owner of this NFT is not its token treasury, the id of the previous NFT
	// in the owner's "doubly-linked list" of owned NFTs (if any).
	OwnerPreviousNftId *NftID `protobuf:"bytes,6,opt,name=owner_previous_nft_id,json=ownerPreviousNftId,proto3" json:"owner_previous_nft_id,omitempty"`
	// *
	// If the owner of this NFT is not its token treasury, the id of the next NFT in
	// the owner's "doubly-linked list" of owned NFTs (if any).
	OwnerNextNftId *NftID `protobuf:"bytes,7,opt,name=owner_next_nft_id,json=ownerNextNftId,proto3" json:"owner_next_nft_id,omitempty"`
}

func (x *Nft) Reset() {
	*x = Nft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nft) ProtoMessage() {}

func (x *Nft) ProtoReflect() protoreflect.Message {
	mi := &file_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nft.ProtoReflect.Descriptor instead.
func (*Nft) Descriptor() ([]byte, []int) {
	return file_nft_proto_rawDescGZIP(), []int{0}
}

func (x *Nft) GetNftId() *NftID {
	if x != nil {
		return x.NftId
	}
	return nil
}

func (x *Nft) GetOwnerId() *AccountID {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *Nft) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

func (x *Nft) GetMintTime() *Timestamp {
	if x != nil {
		return x.MintTime
	}
	return nil
}

func (x *Nft) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Nft) GetOwnerPreviousNftId() *NftID {
	if x != nil {
		return x.OwnerPreviousNftId
	}
	return nil
}

func (x *Nft) GetOwnerNextNftId() *NftID {
	if x != nil {
		return x.OwnerNextNftId
	}
	return nil
}

var File_nft_proto protoreflect.FileDescriptor

var file_nft_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x02, 0x0a, 0x03, 0x4e, 0x66, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x66, 0x74, 0x49, 0x44, 0x52, 0x05, 0x6e, 0x66,
	0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x15,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6e,
	0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x66, 0x74, 0x49, 0x44, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x66, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x66, 0x74, 0x49, 0x44, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x65, 0x78,
	0x74, 0x4e, 0x66, 0x74, 0x49, 0x64, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_proto_rawDescOnce sync.Once
	file_nft_proto_rawDescData = file_nft_proto_rawDesc
)

func file_nft_proto_rawDescGZIP() []byte {
	file_nft_proto_rawDescOnce.Do(func() {
		file_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_proto_rawDescData)
	})
	return file_nft_proto_rawDescData
}

var file_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_nft_proto_goTypes = []interface{}{
	(*Nft)(nil),       // 0: proto.Nft
	(*NftID)(nil),     // 1: proto.NftID
	(*AccountID)(nil), // 2: proto.AccountID
	(*Timestamp)(nil), // 3: proto.Timestamp
}
var file_nft_proto_depIdxs = []int32{
	1, // 0: proto.Nft.nft_id:type_name -> proto.NftID
	2, // 1: proto.Nft.owner_id:type_name -> proto.AccountID
	2, // 2: proto.Nft.spender_id:type_name -> proto.AccountID
	3, // 3: proto.Nft.mint_time:type_name -> proto.Timestamp
	1, // 4: proto.Nft.owner_previous_nft_id:type_name -> proto.NftID
	1, // 5: proto.Nft.owner_next_nft_id:type_name -> proto.NftID
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_nft_proto_init() }
func file_nft_proto_init() {
	if File_nft_proto != nil {
		return
	}
	file_timestamp_proto_init()
	file_basic_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nft_proto_goTypes,
		DependencyIndexes: file_nft_proto_depIdxs,
		MessageInfos:      file_nft_proto_msgTypes,
	}.Build()
	File_nft_proto = out.File
	file_nft_proto_rawDesc = nil
	file_nft_proto_goTypes = nil
	file_nft_proto_depIdxs = nil
}
