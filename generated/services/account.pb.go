// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: account.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The unique entity id of the account.
	AccountId *AccountID `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// *
	// The alias to use for this account, if any.
	Alias []byte `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// *
	// (Optional) The key to be used to sign transactions from the account, if any.
	// This key will not be set for hollow accounts until the account is finalized.
	// This key should be set on all the accounts, except for immutable accounts (0.0.800 and 0.0.801).
	Key *Key `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// *
	// The expiration time of the account, in seconds since the epoch.
	ExpirationSecond int64 `protobuf:"varint,4,opt,name=expiration_second,json=expirationSecond,proto3" json:"expiration_second,omitempty"`
	// *
	// The balance of the account, in tiny-bars.
	TinybarBalance int64 `protobuf:"varint,5,opt,name=tinybar_balance,json=tinybarBalance,proto3" json:"tinybar_balance,omitempty"`
	// *
	// An optional description of the account with UTF-8 encoding up to 100 bytes.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// *
	// A boolean marking if the account has been deleted.
	Deleted bool `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// *
	// The amount of hbars staked to the account.
	StakedToMe int64 `protobuf:"varint,8,opt,name=staked_to_me,json=stakedToMe,proto3" json:"staked_to_me,omitempty"`
	// *
	// If this account stakes to another account, its value will be -1. It will
	// be set to the time when the account starts staking to a node.
	StakePeriodStart int64 `protobuf:"varint,9,opt,name=stake_period_start,json=stakePeriodStart,proto3" json:"stake_period_start,omitempty"`
	// *
	// ID of the account or node to which this account is staking.
	//
	// Types that are assignable to StakedId:
	//
	//	*Account_StakedAccountId
	//	*Account_StakedNodeId
	StakedId isAccount_StakedId `protobuf_oneof:"staked_id"`
	// *
	// A boolean marking if the account declines rewards.
	DeclineReward bool `protobuf:"varint,12,opt,name=decline_reward,json=declineReward,proto3" json:"decline_reward,omitempty"`
	// *
	// A boolean marking if the account requires a receiver signature.
	ReceiverSigRequired bool `protobuf:"varint,13,opt,name=receiver_sig_required,json=receiverSigRequired,proto3" json:"receiver_sig_required,omitempty"`
	// *
	// The token ID of the head of the linked list from token relations map for the account.
	HeadTokenId *TokenID `protobuf:"bytes,14,opt,name=head_token_id,json=headTokenId,proto3" json:"head_token_id,omitempty"`
	// *
	// The NftID of the head of the linked list from unique tokens map for the account.
	HeadNftId *NftID `protobuf:"bytes,15,opt,name=head_nft_id,json=headNftId,proto3" json:"head_nft_id,omitempty"`
	// *
	// The serial number of the head NftID of the linked list from unique tokens map for the account.
	HeadNftSerialNumber int64 `protobuf:"varint,16,opt,name=head_nft_serial_number,json=headNftSerialNumber,proto3" json:"head_nft_serial_number,omitempty"`
	// *
	// The number of NFTs owned by the account.
	NumberOwnedNfts int64 `protobuf:"varint,17,opt,name=number_owned_nfts,json=numberOwnedNfts,proto3" json:"number_owned_nfts,omitempty"`
	// *
	// The maximum number of tokens that can be auto-associated with the account.
	MaxAutoAssociations int32 `protobuf:"varint,18,opt,name=max_auto_associations,json=maxAutoAssociations,proto3" json:"max_auto_associations,omitempty"`
	// *
	// The number of used auto-association slots.
	UsedAutoAssociations int32 `protobuf:"varint,19,opt,name=used_auto_associations,json=usedAutoAssociations,proto3" json:"used_auto_associations,omitempty"`
	// *
	// The number of tokens associated with the account. This number is used for
	// fee calculation during renewal of the account.
	NumberAssociations int32 `protobuf:"varint,20,opt,name=number_associations,json=numberAssociations,proto3" json:"number_associations,omitempty"`
	// *
	// A boolean marking if the account is a smart contract.
	SmartContract bool `protobuf:"varint,21,opt,name=smart_contract,json=smartContract,proto3" json:"smart_contract,omitempty"`
	// *
	// The number of tokens with a positive balance associated with the account.
	// If the account has positive balance in a token, it can not be deleted.
	NumberPositiveBalances int32 `protobuf:"varint,22,opt,name=number_positive_balances,json=numberPositiveBalances,proto3" json:"number_positive_balances,omitempty"`
	// *
	// The nonce of the account, used for Ethereum interoperability.
	EthereumNonce int64 `protobuf:"varint,23,opt,name=ethereum_nonce,json=ethereumNonce,proto3" json:"ethereum_nonce,omitempty"`
	// *
	// The amount of hbars staked to the account at the start of the last rewarded period.
	StakeAtStartOfLastRewardedPeriod int64 `protobuf:"varint,24,opt,name=stake_at_start_of_last_rewarded_period,json=stakeAtStartOfLastRewardedPeriod,proto3" json:"stake_at_start_of_last_rewarded_period,omitempty"`
	// *
	// (Optional) The id of an auto-renew account, in the same shard and realm as the account, that
	// has signed a transaction allowing the network to use its balance to automatically extend the account's
	// expiration time when it passes.
	AutoRenewAccountId *AccountID `protobuf:"bytes,25,opt,name=auto_renew_account_id,json=autoRenewAccountId,proto3" json:"auto_renew_account_id,omitempty"`
	// *
	// The number of seconds the network should automatically extend the account's expiration by, if the
	// account has a valid auto-renew account, and is not deleted upon expiration.
	// If this is not provided in an allowed range on account creation, the transaction will fail with INVALID_AUTO_RENEWAL_PERIOD.
	// The default values for the minimum period and maximum period are 30 days and 90 days, respectively.
	AutoRenewSeconds int64 `protobuf:"varint,26,opt,name=auto_renew_seconds,json=autoRenewSeconds,proto3" json:"auto_renew_seconds,omitempty"`
	// *
	// If this account is a smart-contract, number of key-value pairs stored on the contract.
	// This is used to determine the storage rent for the contract.
	ContractKvPairsNumber int32 `protobuf:"varint,27,opt,name=contract_kv_pairs_number,json=contractKvPairsNumber,proto3" json:"contract_kv_pairs_number,omitempty"`
	// *
	// (Optional) List of crypto allowances approved by the account.
	// It contains account number for which the allowance is approved to and
	// the amount approved for that account.
	CryptoAllowances []*AccountCryptoAllowance `protobuf:"bytes,28,rep,name=crypto_allowances,json=cryptoAllowances,proto3" json:"crypto_allowances,omitempty"`
	// *
	// (Optional) List of non-fungible token allowances approved for all by the account.
	// It contains account number approved for spending all serial numbers for the given
	// NFT token number using approved_for_all flag.
	// Allowances for a specific serial number is stored in the NFT itself in state.
	ApproveForAllNftAllowances []*AccountApprovalForAllAllowance `protobuf:"bytes,29,rep,name=approve_for_all_nft_allowances,json=approveForAllNftAllowances,proto3" json:"approve_for_all_nft_allowances,omitempty"`
	// *
	// (Optional) List of fungible token allowances approved by the account.
	// It contains account number for which the allowance is approved to and  the token number.
	// It also contains and the amount approved for that account.
	TokenAllowances []*AccountFungibleTokenAllowance `protobuf:"bytes,30,rep,name=token_allowances,json=tokenAllowances,proto3" json:"token_allowances,omitempty"`
	// *
	// The number of tokens for which this account is treasury
	NumberTreasuryTitles uint32 `protobuf:"varint,31,opt,name=number_treasury_titles,json=numberTreasuryTitles,proto3" json:"number_treasury_titles,omitempty"`
	// *
	// A flag indicating if the account is expired and pending removal.
	// Only the entity expiration system task toggles this flag when it reaches this account
	// and finds it expired. Before setting the flag the system task checks if the account has
	// an auto-renew account with balance. This is done to prevent a zero-balance account with a funded
	// auto-renew account from being treated as expired in the interval between its expiration
	// and the time the system task actually auto-renews it.
	ExpiredAndPendingRemoval bool `protobuf:"varint,32,opt,name=expired_and_pending_removal,json=expiredAndPendingRemoval,proto3" json:"expired_and_pending_removal,omitempty"`
	// *
	// The first key in the doubly-linked list of this contract's storage mappings;
	// It will be null if if the account is not a contract or the contract has no storage mappings.
	FirstContractStorageKey []byte `protobuf:"bytes,33,opt,name=first_contract_storage_key,json=firstContractStorageKey,proto3" json:"first_contract_storage_key,omitempty"`
	// *
	// A pending airdrop ID at the head of the linked list for this account
	// from the account airdrops map.<br/>
	// The account airdrops are connected by including the "next" and "previous"
	// `PendingAirdropID` in each `AccountAirdrop` message.
	// <p>
	// This value SHALL NOT be empty if this account is "sender" for any
	// pending airdrop, and SHALL be empty otherwise.
	HeadPendingAirdropId *PendingAirdropId `protobuf:"bytes,34,opt,name=head_pending_airdrop_id,json=headPendingAirdropId,proto3" json:"head_pending_airdrop_id,omitempty"`
	// *
	// The number of pending airdrops owned by the account. This number is used to collect rent
	// for the account.
	NumberPendingAirdrops uint64 `protobuf:"varint,35,opt,name=number_pending_airdrops,json=numberPendingAirdrops,proto3" json:"number_pending_airdrops,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *Account) GetAlias() []byte {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Account) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Account) GetExpirationSecond() int64 {
	if x != nil {
		return x.ExpirationSecond
	}
	return 0
}

func (x *Account) GetTinybarBalance() int64 {
	if x != nil {
		return x.TinybarBalance
	}
	return 0
}

func (x *Account) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Account) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Account) GetStakedToMe() int64 {
	if x != nil {
		return x.StakedToMe
	}
	return 0
}

func (x *Account) GetStakePeriodStart() int64 {
	if x != nil {
		return x.StakePeriodStart
	}
	return 0
}

func (m *Account) GetStakedId() isAccount_StakedId {
	if m != nil {
		return m.StakedId
	}
	return nil
}

func (x *Account) GetStakedAccountId() *AccountID {
	if x, ok := x.GetStakedId().(*Account_StakedAccountId); ok {
		return x.StakedAccountId
	}
	return nil
}

func (x *Account) GetStakedNodeId() int64 {
	if x, ok := x.GetStakedId().(*Account_StakedNodeId); ok {
		return x.StakedNodeId
	}
	return 0
}

func (x *Account) GetDeclineReward() bool {
	if x != nil {
		return x.DeclineReward
	}
	return false
}

func (x *Account) GetReceiverSigRequired() bool {
	if x != nil {
		return x.ReceiverSigRequired
	}
	return false
}

func (x *Account) GetHeadTokenId() *TokenID {
	if x != nil {
		return x.HeadTokenId
	}
	return nil
}

func (x *Account) GetHeadNftId() *NftID {
	if x != nil {
		return x.HeadNftId
	}
	return nil
}

func (x *Account) GetHeadNftSerialNumber() int64 {
	if x != nil {
		return x.HeadNftSerialNumber
	}
	return 0
}

func (x *Account) GetNumberOwnedNfts() int64 {
	if x != nil {
		return x.NumberOwnedNfts
	}
	return 0
}

func (x *Account) GetMaxAutoAssociations() int32 {
	if x != nil {
		return x.MaxAutoAssociations
	}
	return 0
}

func (x *Account) GetUsedAutoAssociations() int32 {
	if x != nil {
		return x.UsedAutoAssociations
	}
	return 0
}

func (x *Account) GetNumberAssociations() int32 {
	if x != nil {
		return x.NumberAssociations
	}
	return 0
}

func (x *Account) GetSmartContract() bool {
	if x != nil {
		return x.SmartContract
	}
	return false
}

func (x *Account) GetNumberPositiveBalances() int32 {
	if x != nil {
		return x.NumberPositiveBalances
	}
	return 0
}

func (x *Account) GetEthereumNonce() int64 {
	if x != nil {
		return x.EthereumNonce
	}
	return 0
}

func (x *Account) GetStakeAtStartOfLastRewardedPeriod() int64 {
	if x != nil {
		return x.StakeAtStartOfLastRewardedPeriod
	}
	return 0
}

func (x *Account) GetAutoRenewAccountId() *AccountID {
	if x != nil {
		return x.AutoRenewAccountId
	}
	return nil
}

func (x *Account) GetAutoRenewSeconds() int64 {
	if x != nil {
		return x.AutoRenewSeconds
	}
	return 0
}

func (x *Account) GetContractKvPairsNumber() int32 {
	if x != nil {
		return x.ContractKvPairsNumber
	}
	return 0
}

func (x *Account) GetCryptoAllowances() []*AccountCryptoAllowance {
	if x != nil {
		return x.CryptoAllowances
	}
	return nil
}

func (x *Account) GetApproveForAllNftAllowances() []*AccountApprovalForAllAllowance {
	if x != nil {
		return x.ApproveForAllNftAllowances
	}
	return nil
}

func (x *Account) GetTokenAllowances() []*AccountFungibleTokenAllowance {
	if x != nil {
		return x.TokenAllowances
	}
	return nil
}

func (x *Account) GetNumberTreasuryTitles() uint32 {
	if x != nil {
		return x.NumberTreasuryTitles
	}
	return 0
}

func (x *Account) GetExpiredAndPendingRemoval() bool {
	if x != nil {
		return x.ExpiredAndPendingRemoval
	}
	return false
}

func (x *Account) GetFirstContractStorageKey() []byte {
	if x != nil {
		return x.FirstContractStorageKey
	}
	return nil
}

func (x *Account) GetHeadPendingAirdropId() *PendingAirdropId {
	if x != nil {
		return x.HeadPendingAirdropId
	}
	return nil
}

func (x *Account) GetNumberPendingAirdrops() uint64 {
	if x != nil {
		return x.NumberPendingAirdrops
	}
	return 0
}

type isAccount_StakedId interface {
	isAccount_StakedId()
}

type Account_StakedAccountId struct {
	// *
	// ID of the new account to which this account is staking. If set to the sentinel <tt>0.0.0</tt> AccountID,
	// this field removes this account's staked account ID.
	StakedAccountId *AccountID `protobuf:"bytes,10,opt,name=staked_account_id,json=stakedAccountId,proto3,oneof"`
}

type Account_StakedNodeId struct {
	// *
	// ID of the new node this account is staked to. If set to the sentinel <tt>-1</tt>, this field
	// removes this account's staked node ID.
	StakedNodeId int64 `protobuf:"varint,11,opt,name=staked_node_id,json=stakedNodeId,proto3,oneof"`
}

func (*Account_StakedAccountId) isAccount_StakedId() {}

func (*Account_StakedNodeId) isAccount_StakedId() {}

// *
// Allowance granted by this account to a spender for a specific non-fungible token
// using ApproveForAll. This allows spender to spend all serial numbers for the given
// non-fungible token id.
type AccountApprovalForAllAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   *TokenID   `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SpenderId *AccountID `protobuf:"bytes,2,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
}

func (x *AccountApprovalForAllAllowance) Reset() {
	*x = AccountApprovalForAllAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountApprovalForAllAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountApprovalForAllAllowance) ProtoMessage() {}

func (x *AccountApprovalForAllAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountApprovalForAllAllowance.ProtoReflect.Descriptor instead.
func (*AccountApprovalForAllAllowance) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *AccountApprovalForAllAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *AccountApprovalForAllAllowance) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

// *
// Allowance granted by this account to another account for a specific fungible token.
// This also contains the amount of the token that is approved for the account.
// This allows spender to spend the amount of tokens approved for the account.
type AccountFungibleTokenAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   *TokenID   `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SpenderId *AccountID `protobuf:"bytes,2,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
	Amount    int64      `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AccountFungibleTokenAllowance) Reset() {
	*x = AccountFungibleTokenAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountFungibleTokenAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFungibleTokenAllowance) ProtoMessage() {}

func (x *AccountFungibleTokenAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFungibleTokenAllowance.ProtoReflect.Descriptor instead.
func (*AccountFungibleTokenAllowance) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

func (x *AccountFungibleTokenAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *AccountFungibleTokenAllowance) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

func (x *AccountFungibleTokenAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// *
// Allowance granted by this account to another account for an amount of hbars.
// This allows spender to spend the amount of hbars approved for the account.
type AccountCryptoAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpenderId *AccountID `protobuf:"bytes,1,opt,name=spender_id,json=spenderId,proto3" json:"spender_id,omitempty"`
	Amount    int64      `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AccountCryptoAllowance) Reset() {
	*x = AccountCryptoAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCryptoAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCryptoAllowance) ProtoMessage() {}

func (x *AccountCryptoAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCryptoAllowance.ProtoReflect.Descriptor instead.
func (*AccountCryptoAllowance) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3}
}

func (x *AccountCryptoAllowance) GetSpenderId() *AccountID {
	if x != nil {
		return x.SpenderId
	}
	return nil
}

func (x *AccountCryptoAllowance) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x0e, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6e, 0x79, 0x62, 0x61, 0x72,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x69, 0x6e, 0x79, 0x62, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x66, 0x74, 0x49, 0x44, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x4e, 0x66, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4e, 0x66,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x26, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x76, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x69, 0x0a, 0x1e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x1a,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x6e, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a,
	0x17, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x69,
	0x72, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x69,
	0x72, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x52, 0x14, 0x68, 0x65, 0x61, 0x64, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x72,
	0x64, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x93, 0x01, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData = file_account_proto_rawDesc
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_proto_rawDescData)
	})
	return file_account_proto_rawDescData
}

var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_account_proto_goTypes = []interface{}{
	(*Account)(nil),                        // 0: proto.Account
	(*AccountApprovalForAllAllowance)(nil), // 1: proto.AccountApprovalForAllAllowance
	(*AccountFungibleTokenAllowance)(nil),  // 2: proto.AccountFungibleTokenAllowance
	(*AccountCryptoAllowance)(nil),         // 3: proto.AccountCryptoAllowance
	(*AccountID)(nil),                      // 4: proto.AccountID
	(*Key)(nil),                            // 5: proto.Key
	(*TokenID)(nil),                        // 6: proto.TokenID
	(*NftID)(nil),                          // 7: proto.NftID
	(*PendingAirdropId)(nil),               // 8: proto.PendingAirdropId
}
var file_account_proto_depIdxs = []int32{
	4,  // 0: proto.Account.account_id:type_name -> proto.AccountID
	5,  // 1: proto.Account.key:type_name -> proto.Key
	4,  // 2: proto.Account.staked_account_id:type_name -> proto.AccountID
	6,  // 3: proto.Account.head_token_id:type_name -> proto.TokenID
	7,  // 4: proto.Account.head_nft_id:type_name -> proto.NftID
	4,  // 5: proto.Account.auto_renew_account_id:type_name -> proto.AccountID
	3,  // 6: proto.Account.crypto_allowances:type_name -> proto.AccountCryptoAllowance
	1,  // 7: proto.Account.approve_for_all_nft_allowances:type_name -> proto.AccountApprovalForAllAllowance
	2,  // 8: proto.Account.token_allowances:type_name -> proto.AccountFungibleTokenAllowance
	8,  // 9: proto.Account.head_pending_airdrop_id:type_name -> proto.PendingAirdropId
	6,  // 10: proto.AccountApprovalForAllAllowance.token_id:type_name -> proto.TokenID
	4,  // 11: proto.AccountApprovalForAllAllowance.spender_id:type_name -> proto.AccountID
	6,  // 12: proto.AccountFungibleTokenAllowance.token_id:type_name -> proto.TokenID
	4,  // 13: proto.AccountFungibleTokenAllowance.spender_id:type_name -> proto.AccountID
	4,  // 14: proto.AccountCryptoAllowance.spender_id:type_name -> proto.AccountID
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	file_common_proto_init()
	file_basic_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountApprovalForAllAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountFungibleTokenAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCryptoAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_account_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Account_StakedAccountId)(nil),
		(*Account_StakedNodeId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_rawDesc = nil
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
