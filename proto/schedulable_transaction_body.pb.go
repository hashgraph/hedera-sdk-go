// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/schedulable_transaction_body.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// A schedulable transaction. Note that the global/dynamic system property
// <tt>scheduling.whitelist</tt> controls which transaction types may be scheduled.  In Hedera
// Services 0.13.0, it will include only <tt>CryptoTransfer</tt> and <tt>ConsensusSubmitMessage</tt>
// functions.
type SchedulableTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The maximum transaction fee the client is willing to pay
	TransactionFee uint64 `protobuf:"varint,1,opt,name=transactionFee,proto3" json:"transactionFee,omitempty"`
	//*
	// A memo to include the execution record; the UTF-8 encoding may be up to 100 bytes and must not
	// include the zero byte
	Memo string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
	// Types that are assignable to Data:
	//	*SchedulableTransactionBody_ContractCall
	//	*SchedulableTransactionBody_ContractCreateInstance
	//	*SchedulableTransactionBody_ContractUpdateInstance
	//	*SchedulableTransactionBody_ContractDeleteInstance
	//	*SchedulableTransactionBody_CryptoCreateAccount
	//	*SchedulableTransactionBody_CryptoDelete
	//	*SchedulableTransactionBody_CryptoTransfer
	//	*SchedulableTransactionBody_CryptoUpdateAccount
	//	*SchedulableTransactionBody_FileAppend
	//	*SchedulableTransactionBody_FileCreate
	//	*SchedulableTransactionBody_FileDelete
	//	*SchedulableTransactionBody_FileUpdate
	//	*SchedulableTransactionBody_SystemDelete
	//	*SchedulableTransactionBody_SystemUndelete
	//	*SchedulableTransactionBody_Freeze
	//	*SchedulableTransactionBody_ConsensusCreateTopic
	//	*SchedulableTransactionBody_ConsensusUpdateTopic
	//	*SchedulableTransactionBody_ConsensusDeleteTopic
	//	*SchedulableTransactionBody_ConsensusSubmitMessage
	//	*SchedulableTransactionBody_TokenCreation
	//	*SchedulableTransactionBody_TokenFreeze
	//	*SchedulableTransactionBody_TokenUnfreeze
	//	*SchedulableTransactionBody_TokenGrantKyc
	//	*SchedulableTransactionBody_TokenRevokeKyc
	//	*SchedulableTransactionBody_TokenDeletion
	//	*SchedulableTransactionBody_TokenUpdate
	//	*SchedulableTransactionBody_TokenMint
	//	*SchedulableTransactionBody_TokenBurn
	//	*SchedulableTransactionBody_TokenWipe
	//	*SchedulableTransactionBody_TokenAssociate
	//	*SchedulableTransactionBody_TokenDissociate
	//	*SchedulableTransactionBody_TokenPause
	//	*SchedulableTransactionBody_TokenUnpause
	//	*SchedulableTransactionBody_ScheduleDelete
	Data isSchedulableTransactionBody_Data `protobuf_oneof:"data"`
}

func (x *SchedulableTransactionBody) Reset() {
	*x = SchedulableTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schedulable_transaction_body_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulableTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulableTransactionBody) ProtoMessage() {}

func (x *SchedulableTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schedulable_transaction_body_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulableTransactionBody.ProtoReflect.Descriptor instead.
func (*SchedulableTransactionBody) Descriptor() ([]byte, []int) {
	return file_proto_schedulable_transaction_body_proto_rawDescGZIP(), []int{0}
}

func (x *SchedulableTransactionBody) GetTransactionFee() uint64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *SchedulableTransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (m *SchedulableTransactionBody) GetData() isSchedulableTransactionBody_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractCall() *ContractCallTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ContractCall); ok {
		return x.ContractCall
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractCreateInstance() *ContractCreateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ContractCreateInstance); ok {
		return x.ContractCreateInstance
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractUpdateInstance() *ContractUpdateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ContractUpdateInstance); ok {
		return x.ContractUpdateInstance
	}
	return nil
}

func (x *SchedulableTransactionBody) GetContractDeleteInstance() *ContractDeleteTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ContractDeleteInstance); ok {
		return x.ContractDeleteInstance
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoCreateAccount() *CryptoCreateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_CryptoCreateAccount); ok {
		return x.CryptoCreateAccount
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoDelete() *CryptoDeleteTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_CryptoDelete); ok {
		return x.CryptoDelete
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoTransfer() *CryptoTransferTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_CryptoTransfer); ok {
		return x.CryptoTransfer
	}
	return nil
}

func (x *SchedulableTransactionBody) GetCryptoUpdateAccount() *CryptoUpdateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_CryptoUpdateAccount); ok {
		return x.CryptoUpdateAccount
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileAppend() *FileAppendTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_FileAppend); ok {
		return x.FileAppend
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileCreate() *FileCreateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_FileCreate); ok {
		return x.FileCreate
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileDelete() *FileDeleteTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_FileDelete); ok {
		return x.FileDelete
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFileUpdate() *FileUpdateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_FileUpdate); ok {
		return x.FileUpdate
	}
	return nil
}

func (x *SchedulableTransactionBody) GetSystemDelete() *SystemDeleteTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_SystemDelete); ok {
		return x.SystemDelete
	}
	return nil
}

func (x *SchedulableTransactionBody) GetSystemUndelete() *SystemUndeleteTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_SystemUndelete); ok {
		return x.SystemUndelete
	}
	return nil
}

func (x *SchedulableTransactionBody) GetFreeze() *FreezeTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_Freeze); ok {
		return x.Freeze
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusCreateTopic() *ConsensusCreateTopicTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ConsensusCreateTopic); ok {
		return x.ConsensusCreateTopic
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusUpdateTopic() *ConsensusUpdateTopicTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ConsensusUpdateTopic); ok {
		return x.ConsensusUpdateTopic
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusDeleteTopic() *ConsensusDeleteTopicTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ConsensusDeleteTopic); ok {
		return x.ConsensusDeleteTopic
	}
	return nil
}

func (x *SchedulableTransactionBody) GetConsensusSubmitMessage() *ConsensusSubmitMessageTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ConsensusSubmitMessage); ok {
		return x.ConsensusSubmitMessage
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenCreation() *TokenCreateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenCreation); ok {
		return x.TokenCreation
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenFreeze() *TokenFreezeAccountTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenFreeze); ok {
		return x.TokenFreeze
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenUnfreeze() *TokenUnfreezeAccountTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenUnfreeze); ok {
		return x.TokenUnfreeze
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenGrantKyc() *TokenGrantKycTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenGrantKyc); ok {
		return x.TokenGrantKyc
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenRevokeKyc() *TokenRevokeKycTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenRevokeKyc); ok {
		return x.TokenRevokeKyc
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenDeletion() *TokenDeleteTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenDeletion); ok {
		return x.TokenDeletion
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenUpdate() *TokenUpdateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenUpdate); ok {
		return x.TokenUpdate
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenMint() *TokenMintTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenMint); ok {
		return x.TokenMint
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenBurn() *TokenBurnTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenBurn); ok {
		return x.TokenBurn
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenWipe() *TokenWipeAccountTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenWipe); ok {
		return x.TokenWipe
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenAssociate() *TokenAssociateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenAssociate); ok {
		return x.TokenAssociate
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenDissociate() *TokenDissociateTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenDissociate); ok {
		return x.TokenDissociate
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenPause() *TokenPauseTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenPause); ok {
		return x.TokenPause
	}
	return nil
}

func (x *SchedulableTransactionBody) GetTokenUnpause() *TokenUnpauseTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_TokenUnpause); ok {
		return x.TokenUnpause
	}
	return nil
}

func (x *SchedulableTransactionBody) GetScheduleDelete() *ScheduleDeleteTransactionBody {
	if x, ok := x.GetData().(*SchedulableTransactionBody_ScheduleDelete); ok {
		return x.ScheduleDelete
	}
	return nil
}

type isSchedulableTransactionBody_Data interface {
	isSchedulableTransactionBody_Data()
}

type SchedulableTransactionBody_ContractCall struct {
	//*
	// Calls a function of a contract instance
	ContractCall *ContractCallTransactionBody `protobuf:"bytes,3,opt,name=contractCall,proto3,oneof"`
}

type SchedulableTransactionBody_ContractCreateInstance struct {
	//*
	// Creates a contract instance
	ContractCreateInstance *ContractCreateTransactionBody `protobuf:"bytes,4,opt,name=contractCreateInstance,proto3,oneof"`
}

type SchedulableTransactionBody_ContractUpdateInstance struct {
	//*
	// Updates a contract
	ContractUpdateInstance *ContractUpdateTransactionBody `protobuf:"bytes,5,opt,name=contractUpdateInstance,proto3,oneof"`
}

type SchedulableTransactionBody_ContractDeleteInstance struct {
	//*
	// Delete contract and transfer remaining balance into specified account
	ContractDeleteInstance *ContractDeleteTransactionBody `protobuf:"bytes,6,opt,name=contractDeleteInstance,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoCreateAccount struct {
	//*
	// Create a new cryptocurrency account
	CryptoCreateAccount *CryptoCreateTransactionBody `protobuf:"bytes,7,opt,name=cryptoCreateAccount,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoDelete struct {
	//*
	// Delete a cryptocurrency account (mark as deleted, and transfer hbars out)
	CryptoDelete *CryptoDeleteTransactionBody `protobuf:"bytes,8,opt,name=cryptoDelete,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoTransfer struct {
	//*
	// Transfer amount between accounts
	CryptoTransfer *CryptoTransferTransactionBody `protobuf:"bytes,9,opt,name=cryptoTransfer,proto3,oneof"`
}

type SchedulableTransactionBody_CryptoUpdateAccount struct {
	//*
	// Modify information such as the expiration date for an account
	CryptoUpdateAccount *CryptoUpdateTransactionBody `protobuf:"bytes,10,opt,name=cryptoUpdateAccount,proto3,oneof"`
}

type SchedulableTransactionBody_FileAppend struct {
	//*
	// Add bytes to the end of the contents of a file
	FileAppend *FileAppendTransactionBody `protobuf:"bytes,11,opt,name=fileAppend,proto3,oneof"`
}

type SchedulableTransactionBody_FileCreate struct {
	//*
	// Create a new file
	FileCreate *FileCreateTransactionBody `protobuf:"bytes,12,opt,name=fileCreate,proto3,oneof"`
}

type SchedulableTransactionBody_FileDelete struct {
	//*
	// Delete a file (remove contents and mark as deleted until it expires)
	FileDelete *FileDeleteTransactionBody `protobuf:"bytes,13,opt,name=fileDelete,proto3,oneof"`
}

type SchedulableTransactionBody_FileUpdate struct {
	//*
	// Modify information such as the expiration date for a file
	FileUpdate *FileUpdateTransactionBody `protobuf:"bytes,14,opt,name=fileUpdate,proto3,oneof"`
}

type SchedulableTransactionBody_SystemDelete struct {
	//*
	// Hedera administrative deletion of a file or smart contract
	SystemDelete *SystemDeleteTransactionBody `protobuf:"bytes,15,opt,name=systemDelete,proto3,oneof"`
}

type SchedulableTransactionBody_SystemUndelete struct {
	//*
	// To undelete an entity deleted by SystemDelete
	SystemUndelete *SystemUndeleteTransactionBody `protobuf:"bytes,16,opt,name=systemUndelete,proto3,oneof"`
}

type SchedulableTransactionBody_Freeze struct {
	//*
	// Freeze the nodes
	Freeze *FreezeTransactionBody `protobuf:"bytes,17,opt,name=freeze,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusCreateTopic struct {
	//*
	// Creates a topic
	ConsensusCreateTopic *ConsensusCreateTopicTransactionBody `protobuf:"bytes,18,opt,name=consensusCreateTopic,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusUpdateTopic struct {
	//*
	// Updates a topic
	ConsensusUpdateTopic *ConsensusUpdateTopicTransactionBody `protobuf:"bytes,19,opt,name=consensusUpdateTopic,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusDeleteTopic struct {
	//*
	// Deletes a topic
	ConsensusDeleteTopic *ConsensusDeleteTopicTransactionBody `protobuf:"bytes,20,opt,name=consensusDeleteTopic,proto3,oneof"`
}

type SchedulableTransactionBody_ConsensusSubmitMessage struct {
	//*
	// Submits message to a topic
	ConsensusSubmitMessage *ConsensusSubmitMessageTransactionBody `protobuf:"bytes,21,opt,name=consensusSubmitMessage,proto3,oneof"`
}

type SchedulableTransactionBody_TokenCreation struct {
	//*
	// Creates a token instance
	TokenCreation *TokenCreateTransactionBody `protobuf:"bytes,22,opt,name=tokenCreation,proto3,oneof"`
}

type SchedulableTransactionBody_TokenFreeze struct {
	//*
	// Freezes account not to be able to transact with a token
	TokenFreeze *TokenFreezeAccountTransactionBody `protobuf:"bytes,23,opt,name=tokenFreeze,proto3,oneof"`
}

type SchedulableTransactionBody_TokenUnfreeze struct {
	//*
	// Unfreezes account for a token
	TokenUnfreeze *TokenUnfreezeAccountTransactionBody `protobuf:"bytes,24,opt,name=tokenUnfreeze,proto3,oneof"`
}

type SchedulableTransactionBody_TokenGrantKyc struct {
	//*
	// Grants KYC to an account for a token
	TokenGrantKyc *TokenGrantKycTransactionBody `protobuf:"bytes,25,opt,name=tokenGrantKyc,proto3,oneof"`
}

type SchedulableTransactionBody_TokenRevokeKyc struct {
	//*
	// Revokes KYC of an account for a token
	TokenRevokeKyc *TokenRevokeKycTransactionBody `protobuf:"bytes,26,opt,name=tokenRevokeKyc,proto3,oneof"`
}

type SchedulableTransactionBody_TokenDeletion struct {
	//*
	// Deletes a token instance
	TokenDeletion *TokenDeleteTransactionBody `protobuf:"bytes,27,opt,name=tokenDeletion,proto3,oneof"`
}

type SchedulableTransactionBody_TokenUpdate struct {
	//*
	// Updates a token instance
	TokenUpdate *TokenUpdateTransactionBody `protobuf:"bytes,28,opt,name=tokenUpdate,proto3,oneof"`
}

type SchedulableTransactionBody_TokenMint struct {
	//*
	// Mints new tokens to a token's treasury account
	TokenMint *TokenMintTransactionBody `protobuf:"bytes,29,opt,name=tokenMint,proto3,oneof"`
}

type SchedulableTransactionBody_TokenBurn struct {
	//*
	// Burns tokens from a token's treasury account
	TokenBurn *TokenBurnTransactionBody `protobuf:"bytes,30,opt,name=tokenBurn,proto3,oneof"`
}

type SchedulableTransactionBody_TokenWipe struct {
	//*
	// Wipes amount of tokens from an account
	TokenWipe *TokenWipeAccountTransactionBody `protobuf:"bytes,31,opt,name=tokenWipe,proto3,oneof"`
}

type SchedulableTransactionBody_TokenAssociate struct {
	//*
	// Associate tokens to an account
	TokenAssociate *TokenAssociateTransactionBody `protobuf:"bytes,32,opt,name=tokenAssociate,proto3,oneof"`
}

type SchedulableTransactionBody_TokenDissociate struct {
	//*
	// Dissociate tokens from an account
	TokenDissociate *TokenDissociateTransactionBody `protobuf:"bytes,33,opt,name=tokenDissociate,proto3,oneof"`
}

type SchedulableTransactionBody_TokenPause struct {
	//*
	// Pauses the Token
	TokenPause *TokenPauseTransactionBody `protobuf:"bytes,35,opt,name=token_pause,json=tokenPause,proto3,oneof"`
}

type SchedulableTransactionBody_TokenUnpause struct {
	//*
	// Unpauses the Token
	TokenUnpause *TokenUnpauseTransactionBody `protobuf:"bytes,36,opt,name=token_unpause,json=tokenUnpause,proto3,oneof"`
}

type SchedulableTransactionBody_ScheduleDelete struct {
	//*
	// Marks a schedule in the network's action queue as deleted, preventing it from executing
	ScheduleDelete *ScheduleDeleteTransactionBody `protobuf:"bytes,34,opt,name=scheduleDelete,proto3,oneof"`
}

func (*SchedulableTransactionBody_ContractCall) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ContractCreateInstance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ContractUpdateInstance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ContractDeleteInstance) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoCreateAccount) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoTransfer) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_CryptoUpdateAccount) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileAppend) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileCreate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_FileUpdate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_SystemDelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_SystemUndelete) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_Freeze) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusCreateTopic) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusUpdateTopic) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusDeleteTopic) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ConsensusSubmitMessage) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenCreation) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenFreeze) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenUnfreeze) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenGrantKyc) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenRevokeKyc) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenDeletion) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenUpdate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenMint) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenBurn) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenWipe) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenAssociate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenDissociate) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenPause) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_TokenUnpause) isSchedulableTransactionBody_Data() {}

func (*SchedulableTransactionBody_ScheduleDelete) isSchedulableTransactionBody_Data() {}

var File_proto_schedulable_transaction_body_proto protoreflect.FileDescriptor

var file_proto_schedulable_transaction_body_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x79, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x6b, 0x79, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x77, 0x69, 0x70, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed,
	0x15, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12,
	0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x66, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a,
	0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x6e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4b, 0x79, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x4b, 0x79, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x4b, 0x79, 0x63, 0x12, 0x4e, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x79, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x4b, 0x79, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x4b, 0x79, 0x63, 0x12, 0x49, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x70, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x57,
	0x69, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x4b,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2f, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_schedulable_transaction_body_proto_rawDescOnce sync.Once
	file_proto_schedulable_transaction_body_proto_rawDescData = file_proto_schedulable_transaction_body_proto_rawDesc
)

func file_proto_schedulable_transaction_body_proto_rawDescGZIP() []byte {
	file_proto_schedulable_transaction_body_proto_rawDescOnce.Do(func() {
		file_proto_schedulable_transaction_body_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_schedulable_transaction_body_proto_rawDescData)
	})
	return file_proto_schedulable_transaction_body_proto_rawDescData
}

var file_proto_schedulable_transaction_body_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_schedulable_transaction_body_proto_goTypes = []interface{}{
	(*SchedulableTransactionBody)(nil),            // 0: proto.SchedulableTransactionBody
	(*ContractCallTransactionBody)(nil),           // 1: proto.ContractCallTransactionBody
	(*ContractCreateTransactionBody)(nil),         // 2: proto.ContractCreateTransactionBody
	(*ContractUpdateTransactionBody)(nil),         // 3: proto.ContractUpdateTransactionBody
	(*ContractDeleteTransactionBody)(nil),         // 4: proto.ContractDeleteTransactionBody
	(*CryptoCreateTransactionBody)(nil),           // 5: proto.CryptoCreateTransactionBody
	(*CryptoDeleteTransactionBody)(nil),           // 6: proto.CryptoDeleteTransactionBody
	(*CryptoTransferTransactionBody)(nil),         // 7: proto.CryptoTransferTransactionBody
	(*CryptoUpdateTransactionBody)(nil),           // 8: proto.CryptoUpdateTransactionBody
	(*FileAppendTransactionBody)(nil),             // 9: proto.FileAppendTransactionBody
	(*FileCreateTransactionBody)(nil),             // 10: proto.FileCreateTransactionBody
	(*FileDeleteTransactionBody)(nil),             // 11: proto.FileDeleteTransactionBody
	(*FileUpdateTransactionBody)(nil),             // 12: proto.FileUpdateTransactionBody
	(*SystemDeleteTransactionBody)(nil),           // 13: proto.SystemDeleteTransactionBody
	(*SystemUndeleteTransactionBody)(nil),         // 14: proto.SystemUndeleteTransactionBody
	(*FreezeTransactionBody)(nil),                 // 15: proto.FreezeTransactionBody
	(*ConsensusCreateTopicTransactionBody)(nil),   // 16: proto.ConsensusCreateTopicTransactionBody
	(*ConsensusUpdateTopicTransactionBody)(nil),   // 17: proto.ConsensusUpdateTopicTransactionBody
	(*ConsensusDeleteTopicTransactionBody)(nil),   // 18: proto.ConsensusDeleteTopicTransactionBody
	(*ConsensusSubmitMessageTransactionBody)(nil), // 19: proto.ConsensusSubmitMessageTransactionBody
	(*TokenCreateTransactionBody)(nil),            // 20: proto.TokenCreateTransactionBody
	(*TokenFreezeAccountTransactionBody)(nil),     // 21: proto.TokenFreezeAccountTransactionBody
	(*TokenUnfreezeAccountTransactionBody)(nil),   // 22: proto.TokenUnfreezeAccountTransactionBody
	(*TokenGrantKycTransactionBody)(nil),          // 23: proto.TokenGrantKycTransactionBody
	(*TokenRevokeKycTransactionBody)(nil),         // 24: proto.TokenRevokeKycTransactionBody
	(*TokenDeleteTransactionBody)(nil),            // 25: proto.TokenDeleteTransactionBody
	(*TokenUpdateTransactionBody)(nil),            // 26: proto.TokenUpdateTransactionBody
	(*TokenMintTransactionBody)(nil),              // 27: proto.TokenMintTransactionBody
	(*TokenBurnTransactionBody)(nil),              // 28: proto.TokenBurnTransactionBody
	(*TokenWipeAccountTransactionBody)(nil),       // 29: proto.TokenWipeAccountTransactionBody
	(*TokenAssociateTransactionBody)(nil),         // 30: proto.TokenAssociateTransactionBody
	(*TokenDissociateTransactionBody)(nil),        // 31: proto.TokenDissociateTransactionBody
	(*TokenPauseTransactionBody)(nil),             // 32: proto.TokenPauseTransactionBody
	(*TokenUnpauseTransactionBody)(nil),           // 33: proto.TokenUnpauseTransactionBody
	(*ScheduleDeleteTransactionBody)(nil),         // 34: proto.ScheduleDeleteTransactionBody
}
var file_proto_schedulable_transaction_body_proto_depIdxs = []int32{
	1,  // 0: proto.SchedulableTransactionBody.contractCall:type_name -> proto.ContractCallTransactionBody
	2,  // 1: proto.SchedulableTransactionBody.contractCreateInstance:type_name -> proto.ContractCreateTransactionBody
	3,  // 2: proto.SchedulableTransactionBody.contractUpdateInstance:type_name -> proto.ContractUpdateTransactionBody
	4,  // 3: proto.SchedulableTransactionBody.contractDeleteInstance:type_name -> proto.ContractDeleteTransactionBody
	5,  // 4: proto.SchedulableTransactionBody.cryptoCreateAccount:type_name -> proto.CryptoCreateTransactionBody
	6,  // 5: proto.SchedulableTransactionBody.cryptoDelete:type_name -> proto.CryptoDeleteTransactionBody
	7,  // 6: proto.SchedulableTransactionBody.cryptoTransfer:type_name -> proto.CryptoTransferTransactionBody
	8,  // 7: proto.SchedulableTransactionBody.cryptoUpdateAccount:type_name -> proto.CryptoUpdateTransactionBody
	9,  // 8: proto.SchedulableTransactionBody.fileAppend:type_name -> proto.FileAppendTransactionBody
	10, // 9: proto.SchedulableTransactionBody.fileCreate:type_name -> proto.FileCreateTransactionBody
	11, // 10: proto.SchedulableTransactionBody.fileDelete:type_name -> proto.FileDeleteTransactionBody
	12, // 11: proto.SchedulableTransactionBody.fileUpdate:type_name -> proto.FileUpdateTransactionBody
	13, // 12: proto.SchedulableTransactionBody.systemDelete:type_name -> proto.SystemDeleteTransactionBody
	14, // 13: proto.SchedulableTransactionBody.systemUndelete:type_name -> proto.SystemUndeleteTransactionBody
	15, // 14: proto.SchedulableTransactionBody.freeze:type_name -> proto.FreezeTransactionBody
	16, // 15: proto.SchedulableTransactionBody.consensusCreateTopic:type_name -> proto.ConsensusCreateTopicTransactionBody
	17, // 16: proto.SchedulableTransactionBody.consensusUpdateTopic:type_name -> proto.ConsensusUpdateTopicTransactionBody
	18, // 17: proto.SchedulableTransactionBody.consensusDeleteTopic:type_name -> proto.ConsensusDeleteTopicTransactionBody
	19, // 18: proto.SchedulableTransactionBody.consensusSubmitMessage:type_name -> proto.ConsensusSubmitMessageTransactionBody
	20, // 19: proto.SchedulableTransactionBody.tokenCreation:type_name -> proto.TokenCreateTransactionBody
	21, // 20: proto.SchedulableTransactionBody.tokenFreeze:type_name -> proto.TokenFreezeAccountTransactionBody
	22, // 21: proto.SchedulableTransactionBody.tokenUnfreeze:type_name -> proto.TokenUnfreezeAccountTransactionBody
	23, // 22: proto.SchedulableTransactionBody.tokenGrantKyc:type_name -> proto.TokenGrantKycTransactionBody
	24, // 23: proto.SchedulableTransactionBody.tokenRevokeKyc:type_name -> proto.TokenRevokeKycTransactionBody
	25, // 24: proto.SchedulableTransactionBody.tokenDeletion:type_name -> proto.TokenDeleteTransactionBody
	26, // 25: proto.SchedulableTransactionBody.tokenUpdate:type_name -> proto.TokenUpdateTransactionBody
	27, // 26: proto.SchedulableTransactionBody.tokenMint:type_name -> proto.TokenMintTransactionBody
	28, // 27: proto.SchedulableTransactionBody.tokenBurn:type_name -> proto.TokenBurnTransactionBody
	29, // 28: proto.SchedulableTransactionBody.tokenWipe:type_name -> proto.TokenWipeAccountTransactionBody
	30, // 29: proto.SchedulableTransactionBody.tokenAssociate:type_name -> proto.TokenAssociateTransactionBody
	31, // 30: proto.SchedulableTransactionBody.tokenDissociate:type_name -> proto.TokenDissociateTransactionBody
	32, // 31: proto.SchedulableTransactionBody.token_pause:type_name -> proto.TokenPauseTransactionBody
	33, // 32: proto.SchedulableTransactionBody.token_unpause:type_name -> proto.TokenUnpauseTransactionBody
	34, // 33: proto.SchedulableTransactionBody.scheduleDelete:type_name -> proto.ScheduleDeleteTransactionBody
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_proto_schedulable_transaction_body_proto_init() }
func file_proto_schedulable_transaction_body_proto_init() {
	if File_proto_schedulable_transaction_body_proto != nil {
		return
	}
	file_proto_system_delete_proto_init()
	file_proto_system_undelete_proto_init()
	file_proto_freeze_proto_init()
	file_proto_contract_call_proto_init()
	file_proto_contract_create_proto_init()
	file_proto_contract_update_proto_init()
	file_proto_crypto_create_proto_init()
	file_proto_crypto_delete_proto_init()
	file_proto_crypto_transfer_proto_init()
	file_proto_crypto_update_proto_init()
	file_proto_file_append_proto_init()
	file_proto_file_create_proto_init()
	file_proto_file_delete_proto_init()
	file_proto_file_update_proto_init()
	file_proto_contract_delete_proto_init()
	file_proto_consensus_create_topic_proto_init()
	file_proto_consensus_update_topic_proto_init()
	file_proto_consensus_delete_topic_proto_init()
	file_proto_consensus_submit_message_proto_init()
	file_proto_token_create_proto_init()
	file_proto_token_freeze_account_proto_init()
	file_proto_token_unfreeze_account_proto_init()
	file_proto_token_grant_kyc_proto_init()
	file_proto_token_revoke_kyc_proto_init()
	file_proto_token_delete_proto_init()
	file_proto_token_update_proto_init()
	file_proto_token_mint_proto_init()
	file_proto_token_burn_proto_init()
	file_proto_token_wipe_account_proto_init()
	file_proto_token_associate_proto_init()
	file_proto_token_dissociate_proto_init()
	file_proto_token_pause_proto_init()
	file_proto_token_unpause_proto_init()
	file_proto_schedule_delete_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_schedulable_transaction_body_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulableTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_schedulable_transaction_body_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SchedulableTransactionBody_ContractCall)(nil),
		(*SchedulableTransactionBody_ContractCreateInstance)(nil),
		(*SchedulableTransactionBody_ContractUpdateInstance)(nil),
		(*SchedulableTransactionBody_ContractDeleteInstance)(nil),
		(*SchedulableTransactionBody_CryptoCreateAccount)(nil),
		(*SchedulableTransactionBody_CryptoDelete)(nil),
		(*SchedulableTransactionBody_CryptoTransfer)(nil),
		(*SchedulableTransactionBody_CryptoUpdateAccount)(nil),
		(*SchedulableTransactionBody_FileAppend)(nil),
		(*SchedulableTransactionBody_FileCreate)(nil),
		(*SchedulableTransactionBody_FileDelete)(nil),
		(*SchedulableTransactionBody_FileUpdate)(nil),
		(*SchedulableTransactionBody_SystemDelete)(nil),
		(*SchedulableTransactionBody_SystemUndelete)(nil),
		(*SchedulableTransactionBody_Freeze)(nil),
		(*SchedulableTransactionBody_ConsensusCreateTopic)(nil),
		(*SchedulableTransactionBody_ConsensusUpdateTopic)(nil),
		(*SchedulableTransactionBody_ConsensusDeleteTopic)(nil),
		(*SchedulableTransactionBody_ConsensusSubmitMessage)(nil),
		(*SchedulableTransactionBody_TokenCreation)(nil),
		(*SchedulableTransactionBody_TokenFreeze)(nil),
		(*SchedulableTransactionBody_TokenUnfreeze)(nil),
		(*SchedulableTransactionBody_TokenGrantKyc)(nil),
		(*SchedulableTransactionBody_TokenRevokeKyc)(nil),
		(*SchedulableTransactionBody_TokenDeletion)(nil),
		(*SchedulableTransactionBody_TokenUpdate)(nil),
		(*SchedulableTransactionBody_TokenMint)(nil),
		(*SchedulableTransactionBody_TokenBurn)(nil),
		(*SchedulableTransactionBody_TokenWipe)(nil),
		(*SchedulableTransactionBody_TokenAssociate)(nil),
		(*SchedulableTransactionBody_TokenDissociate)(nil),
		(*SchedulableTransactionBody_TokenPause)(nil),
		(*SchedulableTransactionBody_TokenUnpause)(nil),
		(*SchedulableTransactionBody_ScheduleDelete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_schedulable_transaction_body_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_schedulable_transaction_body_proto_goTypes,
		DependencyIndexes: file_proto_schedulable_transaction_body_proto_depIdxs,
		MessageInfos:      file_proto_schedulable_transaction_body_proto_msgTypes,
	}.Build()
	File_proto_schedulable_transaction_body_proto = out.File
	file_proto_schedulable_transaction_body_proto_rawDesc = nil
	file_proto_schedulable_transaction_body_proto_goTypes = nil
	file_proto_schedulable_transaction_body_proto_depIdxs = nil
}
