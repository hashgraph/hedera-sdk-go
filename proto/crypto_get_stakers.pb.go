// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/crypto_get_stakers.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Get all the accounts that are proxy staking to this account. For each of them, give the amount
// currently staked. This is not yet implemented, but will be in a future version of the API.
type CryptoGetStakersQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Standard info sent from client to node, including the signed payment, and what kind of
	// response is requested (cost, state proof, both, or neither).
	Header *QueryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	//*
	// The Account ID for which the records should be retrieved
	AccountID *AccountID `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *CryptoGetStakersQuery) Reset() {
	*x = CryptoGetStakersQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_crypto_get_stakers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoGetStakersQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoGetStakersQuery) ProtoMessage() {}

func (x *CryptoGetStakersQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_crypto_get_stakers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoGetStakersQuery.ProtoReflect.Descriptor instead.
func (*CryptoGetStakersQuery) Descriptor() ([]byte, []int) {
	return file_proto_crypto_get_stakers_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoGetStakersQuery) GetHeader() *QueryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CryptoGetStakersQuery) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

//*
// information about a single account that is proxy staking
type ProxyStaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The Account ID that is proxy staking
	AccountID *AccountID `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	//*
	// The number of hbars that are currently proxy staked
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ProxyStaker) Reset() {
	*x = ProxyStaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_crypto_get_stakers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyStaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyStaker) ProtoMessage() {}

func (x *ProxyStaker) ProtoReflect() protoreflect.Message {
	mi := &file_proto_crypto_get_stakers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyStaker.ProtoReflect.Descriptor instead.
func (*ProxyStaker) Descriptor() ([]byte, []int) {
	return file_proto_crypto_get_stakers_proto_rawDescGZIP(), []int{1}
}

func (x *ProxyStaker) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *ProxyStaker) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

//*
// all of the accounts proxy staking to a given account, and the amounts proxy staked
type AllProxyStakers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The Account ID that is being proxy staked to
	AccountID *AccountID `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	//*
	// Each of the proxy staking accounts, and the amount they are proxy staking
	ProxyStaker []*ProxyStaker `protobuf:"bytes,2,rep,name=proxyStaker,proto3" json:"proxyStaker,omitempty"`
}

func (x *AllProxyStakers) Reset() {
	*x = AllProxyStakers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_crypto_get_stakers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllProxyStakers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllProxyStakers) ProtoMessage() {}

func (x *AllProxyStakers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_crypto_get_stakers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllProxyStakers.ProtoReflect.Descriptor instead.
func (*AllProxyStakers) Descriptor() ([]byte, []int) {
	return file_proto_crypto_get_stakers_proto_rawDescGZIP(), []int{2}
}

func (x *AllProxyStakers) GetAccountID() *AccountID {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *AllProxyStakers) GetProxyStaker() []*ProxyStaker {
	if x != nil {
		return x.ProxyStaker
	}
	return nil
}

//*
// Response when the client sends the node CryptoGetStakersQuery
type CryptoGetStakersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Standard response from node to client, including the requested fields: cost, or state proof,
	// or both, or neither
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	//*
	// List of accounts proxy staking to this account, and the amount each is currently proxy
	// staking
	Stakers *AllProxyStakers `protobuf:"bytes,3,opt,name=stakers,proto3" json:"stakers,omitempty"`
}

func (x *CryptoGetStakersResponse) Reset() {
	*x = CryptoGetStakersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_crypto_get_stakers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoGetStakersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoGetStakersResponse) ProtoMessage() {}

func (x *CryptoGetStakersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_crypto_get_stakers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoGetStakersResponse.ProtoReflect.Descriptor instead.
func (*CryptoGetStakersResponse) Descriptor() ([]byte, []int) {
	return file_proto_crypto_get_stakers_proto_rawDescGZIP(), []int{3}
}

func (x *CryptoGetStakersResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CryptoGetStakersResponse) GetStakers() *AllProxyStakers {
	if x != nil {
		return x.Stakers
	}
	return nil
}

var File_proto_crypto_get_stakers_proto protoreflect.FileDescriptor

var file_proto_crypto_get_stakers_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x15, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x18,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x42, 0x4b, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f,
	0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_crypto_get_stakers_proto_rawDescOnce sync.Once
	file_proto_crypto_get_stakers_proto_rawDescData = file_proto_crypto_get_stakers_proto_rawDesc
)

func file_proto_crypto_get_stakers_proto_rawDescGZIP() []byte {
	file_proto_crypto_get_stakers_proto_rawDescOnce.Do(func() {
		file_proto_crypto_get_stakers_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_crypto_get_stakers_proto_rawDescData)
	})
	return file_proto_crypto_get_stakers_proto_rawDescData
}

var file_proto_crypto_get_stakers_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_crypto_get_stakers_proto_goTypes = []interface{}{
	(*CryptoGetStakersQuery)(nil),    // 0: proto.CryptoGetStakersQuery
	(*ProxyStaker)(nil),              // 1: proto.ProxyStaker
	(*AllProxyStakers)(nil),          // 2: proto.AllProxyStakers
	(*CryptoGetStakersResponse)(nil), // 3: proto.CryptoGetStakersResponse
	(*QueryHeader)(nil),              // 4: proto.QueryHeader
	(*AccountID)(nil),                // 5: proto.AccountID
	(*ResponseHeader)(nil),           // 6: proto.ResponseHeader
}
var file_proto_crypto_get_stakers_proto_depIdxs = []int32{
	4, // 0: proto.CryptoGetStakersQuery.header:type_name -> proto.QueryHeader
	5, // 1: proto.CryptoGetStakersQuery.accountID:type_name -> proto.AccountID
	5, // 2: proto.ProxyStaker.accountID:type_name -> proto.AccountID
	5, // 3: proto.AllProxyStakers.accountID:type_name -> proto.AccountID
	1, // 4: proto.AllProxyStakers.proxyStaker:type_name -> proto.ProxyStaker
	6, // 5: proto.CryptoGetStakersResponse.header:type_name -> proto.ResponseHeader
	2, // 6: proto.CryptoGetStakersResponse.stakers:type_name -> proto.AllProxyStakers
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_crypto_get_stakers_proto_init() }
func file_proto_crypto_get_stakers_proto_init() {
	if File_proto_crypto_get_stakers_proto != nil {
		return
	}
	file_proto_basic_types_proto_init()
	file_proto_query_header_proto_init()
	file_proto_response_header_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_crypto_get_stakers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoGetStakersQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_crypto_get_stakers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyStaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_crypto_get_stakers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllProxyStakers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_crypto_get_stakers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoGetStakersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_crypto_get_stakers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_crypto_get_stakers_proto_goTypes,
		DependencyIndexes: file_proto_crypto_get_stakers_proto_depIdxs,
		MessageInfos:      file_proto_crypto_get_stakers_proto_msgTypes,
	}.Build()
	File_proto_crypto_get_stakers_proto = out.File
	file_proto_crypto_get_stakers_proto_rawDesc = nil
	file_proto_crypto_get_stakers_proto_goTypes = nil
	file_proto_crypto_get_stakers_proto_depIdxs = nil
}
