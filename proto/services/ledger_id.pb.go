//*
// # Ledger ID
// A Ledger ID is a Threshold Signature Scheme (TSS) public key that
// identifies the ledger.  A Ledger ID is intended to be long-lived, but
// may change under rare circumstances.  The Ledger ID for a particular
// distributed ledger can be used to validate the signature of that ledger
// in, for example, a block stream "block proof".
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: ledger_id.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A ledger identifier.<br/>
// This message identifies a ledger and is used to verify ledger
// signatures in a Threshold Signature Scheme (TSS).
//
// A ledger identifier SHALL be a public key defined according to the TSS
// process.<br/>
// A ledger identifier SHOULD NOT change, but MAY do so in rare
// circumstances.<br/>
// Clients SHOULD always check for the correct ledger identifier, according to
// the network roster, before attempting to verify any state proof or other
// ledger signature.
//
// ### Block Stream Effects
// Every block in the Block Stream `BlockProof` SHALL be signed via TSS and
// MUST be verified with the ledger identifier current at the _start_ of that
// block.
// If the ledger identifier changes, the new value MUST be used to validate
// Block Proof items after the change.
// A change to the ledger identifier SHALL be reported in a State Change for
// the block containing that change, which SHALL be verified with the _prior_
// ledger identifier.
type LedgerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A public key.<br/>
	// This key both identifies the ledger and can be used to verify ledger
	// signatures.
	// <p>
	// This value MUST be set.<br/>
	// This value MUST NOT be empty.<br/>
	// This value MUST contain a valid public key.
	LedgerId []byte `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// *
	// A round number.<br/>
	// This identifies when this ledger id becomes active.<br/>
	// This value is REQUIRED.
	Round uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	// *
	// A signature from the prior ledger key.<br/>
	// This signature is the _previous_ ledger ID signing _this_ ledger ID.<br/>
	// This value MAY be unset, if there is no prior ledger ID.</br>
	// This value SHOULD be set if a prior ledger ID exists
	// to generate the signature.
	LedgerSignature []byte `protobuf:"bytes,3,opt,name=ledger_signature,json=ledgerSignature,proto3" json:"ledger_signature,omitempty"`
	// *
	// The signatures from nodes in the active roster signing the new
	// ledger id.<br/>
	// These signatures establish a chain of trust from the network to the new
	// ledger id.
	// <p>
	// This value MUST be present when the ledger signature of a previous ledger
	// id is absent.
	RosterSignatures *RosterSignatures `protobuf:"bytes,4,opt,name=roster_signatures,json=rosterSignatures,proto3" json:"roster_signatures,omitempty"`
}

func (x *LedgerId) Reset() {
	*x = LedgerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_id_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerId) ProtoMessage() {}

func (x *LedgerId) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_id_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerId.ProtoReflect.Descriptor instead.
func (*LedgerId) Descriptor() ([]byte, []int) {
	return file_ledger_id_proto_rawDescGZIP(), []int{0}
}

func (x *LedgerId) GetLedgerId() []byte {
	if x != nil {
		return x.LedgerId
	}
	return nil
}

func (x *LedgerId) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *LedgerId) GetLedgerSignature() []byte {
	if x != nil {
		return x.LedgerSignature
	}
	return nil
}

func (x *LedgerId) GetRosterSignatures() *RosterSignatures {
	if x != nil {
		return x.RosterSignatures
	}
	return nil
}

// *
// A collection of signatures from nodes in a roster.
type RosterSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A roster hash for the roster that the node signatures are from.
	RosterHash []byte `protobuf:"bytes,1,opt,name=roster_hash,json=rosterHash,proto3" json:"roster_hash,omitempty"`
	// *
	// A list of node signatures on the same message where all node ids in the
	// NodeSignature objects are from the roster that the roster_hash represents.
	NodeSignatures []*NodeSignature `protobuf:"bytes,2,rep,name=node_signatures,json=nodeSignatures,proto3" json:"node_signatures,omitempty"`
}

func (x *RosterSignatures) Reset() {
	*x = RosterSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_id_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterSignatures) ProtoMessage() {}

func (x *RosterSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_id_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterSignatures.ProtoReflect.Descriptor instead.
func (*RosterSignatures) Descriptor() ([]byte, []int) {
	return file_ledger_id_proto_rawDescGZIP(), []int{1}
}

func (x *RosterSignatures) GetRosterHash() []byte {
	if x != nil {
		return x.RosterHash
	}
	return nil
}

func (x *RosterSignatures) GetNodeSignatures() []*NodeSignature {
	if x != nil {
		return x.NodeSignatures
	}
	return nil
}

// *
// A pair of a _RSA_ signature and the node id of the node that created the
// signature.
type NodeSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The node id of the node that created the _RSA_ signature.
	// This value MUST be set.<br/>
	// This value MUST NOT be empty.<br/>
	// This value is REQUIRED.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// *
	// The bytes of an _RSA_ signature.
	// This value MUST be set.<br/>
	// This value MUST NOT be empty.<br/>
	// This value MUST contain a valid signature.
	NodeSignature []byte `protobuf:"bytes,2,opt,name=node_signature,json=nodeSignature,proto3" json:"node_signature,omitempty"`
}

func (x *NodeSignature) Reset() {
	*x = NodeSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_id_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSignature) ProtoMessage() {}

func (x *NodeSignature) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_id_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSignature.ProtoReflect.Descriptor instead.
func (*NodeSignature) Descriptor() ([]byte, []int) {
	return file_ledger_id_proto_rawDescGZIP(), []int{2}
}

func (x *NodeSignature) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeSignature) GetNodeSignature() []byte {
	if x != nil {
		return x.NodeSignature
	}
	return nil
}

var File_ledger_id_proto protoreflect.FileDescriptor

var file_ledger_id_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x08, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x60, 0x0a, 0x11, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x10, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x59, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0x4f, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ledger_id_proto_rawDescOnce sync.Once
	file_ledger_id_proto_rawDescData = file_ledger_id_proto_rawDesc
)

func file_ledger_id_proto_rawDescGZIP() []byte {
	file_ledger_id_proto_rawDescOnce.Do(func() {
		file_ledger_id_proto_rawDescData = protoimpl.X.CompressGZIP(file_ledger_id_proto_rawDescData)
	})
	return file_ledger_id_proto_rawDescData
}

var file_ledger_id_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ledger_id_proto_goTypes = []interface{}{
	(*LedgerId)(nil),         // 0: com.hedera.hapi.node.state.roster.LedgerId
	(*RosterSignatures)(nil), // 1: com.hedera.hapi.node.state.roster.RosterSignatures
	(*NodeSignature)(nil),    // 2: com.hedera.hapi.node.state.roster.NodeSignature
}
var file_ledger_id_proto_depIdxs = []int32{
	1, // 0: com.hedera.hapi.node.state.roster.LedgerId.roster_signatures:type_name -> com.hedera.hapi.node.state.roster.RosterSignatures
	2, // 1: com.hedera.hapi.node.state.roster.RosterSignatures.node_signatures:type_name -> com.hedera.hapi.node.state.roster.NodeSignature
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ledger_id_proto_init() }
func file_ledger_id_proto_init() {
	if File_ledger_id_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ledger_id_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_id_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_id_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ledger_id_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ledger_id_proto_goTypes,
		DependencyIndexes: file_ledger_id_proto_depIdxs,
		MessageInfos:      file_ledger_id_proto_msgTypes,
	}.Build()
	File_ledger_id_proto = out.File
	file_ledger_id_proto_rawDesc = nil
	file_ledger_id_proto_goTypes = nil
	file_ledger_id_proto_depIdxs = nil
}
