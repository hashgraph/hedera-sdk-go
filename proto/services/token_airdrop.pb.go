//*
// # Token Airdrop
// Messages used to implement a transaction to "airdrop" tokens.<br/>
// An "airdrop" is a distribution of tokens from a funding account
// to one or more recipient accounts, ideally with no action required
// by the recipient account(s).
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: token_airdrop.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Airdrop one or more tokens to one or more accounts.
//
// ### Effects
// This distributes tokens from the balance of one or more sending account(s) to the balance
// of one or more recipient accounts. Accounts MAY receive the tokens in one of four ways.
//
//   - An account already associated to the token to be distributed SHALL receive the
//     airdropped tokens immediately to the recipient account balance.<br/>
//     The fee for this transfer SHALL include the transfer, the airdrop fee, and any custom fees.
//   - An account with available automatic association slots SHALL be automatically
//     associated to the token, and SHALL immediately receive the airdropped tokens to the
//     recipient account balance.<br/>
//     The fee for this transfer SHALL include the transfer, the association, the cost to renew
//     that association once, the airdrop fee, and any custom fees.
//   - An account with "receiver signature required" set SHALL have a "Pending Airdrop" created
//     and must claim that airdrop with a `claimAirdrop` transaction.<br/>
//     The fee for this transfer SHALL include the transfer, the association, the cost to renew
//     that association once, the airdrop fee, and any custom fees. If the pending airdrop is not
//     claimed immediately, the `sender` SHALL pay the cost to renew the token association, and
//     the cost to maintain the pending airdrop, until the pending airdrop is claimed or cancelled.
//   - An account with no available automatic association slots SHALL have a "Pending Airdrop"
//     created and must claim that airdrop with a `claimAirdrop` transaction.<br/>
//     The fee for this transfer SHALL include the transfer, the association, the cost to renew
//     that association once, the airdrop fee, and any custom fees. If the pending airdrop is not
//     claimed immediately, the `sender` SHALL pay the cost to renew the token association, and
//     the cost to maintain the pending airdrop, until the pending airdrop is claimed or cancelled.
//
// If an airdrop would create a pending airdrop for a fungible/common token, and a pending airdrop
// for the same sender, receiver, and token already exists, the existing pending airdrop
// SHALL be updated to add the new amount to the existing airdrop, rather than creating a new
// pending airdrop.
//
// Any airdrop that completes immediately SHALL be irreversible. Any airdrop that results in a
// "Pending Airdrop" MAY be canceled via a `cancelAirdrop` transaction.
//
// All transfer fees (including custom fees and royalties), as well as the rent cost for the
// first auto-renewal period for any automatic-association slot occupied by the airdropped
// tokens, SHALL be charged to the account paying for this transaction.
//
// ### Record Stream Effects
//   - Each successful transfer SHALL be recorded in `token_transfer_list` for the transaction record.
//   - Each successful transfer that consumes an automatic association slot SHALL populate the
//     `automatic_association` field for the record.
//   - Each pending transfer _created_ SHALL be added to the `pending_airdrops` field for the record.
//   - Each pending transfer _updated_ SHALL be added to the `pending_airdrops` field for the record.
type TokenAirdropTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A list of token transfers representing one or more airdrops.
	// The sender for each transfer MUST have sufficient balance to complete the transfers.
	//
	// All token transfers MUST successfully transfer tokens or create a pending airdrop
	// for this transaction to succeed.
	// This list MUST contain between 1 and 10 transfers, inclusive.
	//
	// Note that each transfer of fungible/common tokens requires both a debit and
	// a credit, so each _fungible_ token transfer MUST have _balanced_ entries in the
	// TokenTransferList for that transfer.
	TokenTransfers []*TokenTransferList `protobuf:"bytes,1,rep,name=token_transfers,json=tokenTransfers,proto3" json:"token_transfers,omitempty"`
}

func (x *TokenAirdropTransactionBody) Reset() {
	*x = TokenAirdropTransactionBody{}
	mi := &file_token_airdrop_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenAirdropTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAirdropTransactionBody) ProtoMessage() {}

func (x *TokenAirdropTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_token_airdrop_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAirdropTransactionBody.ProtoReflect.Descriptor instead.
func (*TokenAirdropTransactionBody) Descriptor() ([]byte, []int) {
	return file_token_airdrop_proto_rawDescGZIP(), []int{0}
}

func (x *TokenAirdropTransactionBody) GetTokenTransfers() []*TokenTransferList {
	if x != nil {
		return x.TokenTransfers
	}
	return nil
}

var File_token_airdrop_proto protoreflect.FileDescriptor

var file_token_airdrop_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x60, 0x0a, 0x1b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41,
	0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68,
	0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_token_airdrop_proto_rawDescOnce sync.Once
	file_token_airdrop_proto_rawDescData = file_token_airdrop_proto_rawDesc
)

func file_token_airdrop_proto_rawDescGZIP() []byte {
	file_token_airdrop_proto_rawDescOnce.Do(func() {
		file_token_airdrop_proto_rawDescData = protoimpl.X.CompressGZIP(file_token_airdrop_proto_rawDescData)
	})
	return file_token_airdrop_proto_rawDescData
}

var file_token_airdrop_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_token_airdrop_proto_goTypes = []any{
	(*TokenAirdropTransactionBody)(nil), // 0: proto.TokenAirdropTransactionBody
	(*TokenTransferList)(nil),           // 1: proto.TokenTransferList
}
var file_token_airdrop_proto_depIdxs = []int32{
	1, // 0: proto.TokenAirdropTransactionBody.token_transfers:type_name -> proto.TokenTransferList
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_token_airdrop_proto_init() }
func file_token_airdrop_proto_init() {
	if File_token_airdrop_proto != nil {
		return
	}
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_token_airdrop_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_airdrop_proto_goTypes,
		DependencyIndexes: file_token_airdrop_proto_depIdxs,
		MessageInfos:      file_token_airdrop_proto_msgTypes,
	}.Build()
	File_token_airdrop_proto = out.File
	file_token_airdrop_proto_rawDesc = nil
	file_token_airdrop_proto_goTypes = nil
	file_token_airdrop_proto_depIdxs = nil
}
