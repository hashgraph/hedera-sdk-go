// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: smart_contract_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmartContractService_CreateContract_FullMethodName          = "/proto.SmartContractService/createContract"
	SmartContractService_UpdateContract_FullMethodName          = "/proto.SmartContractService/updateContract"
	SmartContractService_ContractCallMethod_FullMethodName      = "/proto.SmartContractService/contractCallMethod"
	SmartContractService_GetContractInfo_FullMethodName         = "/proto.SmartContractService/getContractInfo"
	SmartContractService_ContractCallLocalMethod_FullMethodName = "/proto.SmartContractService/contractCallLocalMethod"
	SmartContractService_ContractGetBytecode_FullMethodName     = "/proto.SmartContractService/ContractGetBytecode"
	SmartContractService_GetBySolidityID_FullMethodName         = "/proto.SmartContractService/getBySolidityID"
	SmartContractService_GetTxRecordByContractID_FullMethodName = "/proto.SmartContractService/getTxRecordByContractID"
	SmartContractService_DeleteContract_FullMethodName          = "/proto.SmartContractService/deleteContract"
	SmartContractService_SystemDelete_FullMethodName            = "/proto.SmartContractService/systemDelete"
	SmartContractService_SystemUndelete_FullMethodName          = "/proto.SmartContractService/systemUndelete"
	SmartContractService_CallEthereum_FullMethodName            = "/proto.SmartContractService/callEthereum"
)

// SmartContractServiceClient is the client API for SmartContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Transactions and queries for the file service.
type SmartContractServiceClient interface {
	// *
	// Creates a contract
	CreateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Updates a contract with the content
	UpdateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Calls a contract
	ContractCallMethod(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Retrieves the contract information
	GetContractInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Calls a smart contract to be run on a single node
	ContractCallLocalMethod(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Retrieves the runtime code of a contract
	ContractGetBytecode(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Retrieves a contract by its Solidity address
	GetBySolidityID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// Deprecated: Do not use.
	// *
	// Always returns an empty record list, as contract accounts are never effective payers for
	// transactions
	GetTxRecordByContractID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// *
	// Deletes a contract instance and transfers any remaining hbars to a specified receiver
	DeleteContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Deletes a contract if the submitting account has network admin privileges
	SystemDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Undeletes a contract if the submitting account has network admin privileges
	SystemUndelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Ethereum transaction
	CallEthereum(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type smartContractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartContractServiceClient(cc grpc.ClientConnInterface) SmartContractServiceClient {
	return &smartContractServiceClient{cc}
}

func (c *smartContractServiceClient) CreateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_CreateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) UpdateContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_UpdateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ContractCallMethod(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_ContractCallMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) GetContractInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_GetContractInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ContractCallLocalMethod(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_ContractCallLocalMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ContractGetBytecode(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_ContractGetBytecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) GetBySolidityID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_GetBySolidityID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *smartContractServiceClient) GetTxRecordByContractID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SmartContractService_GetTxRecordByContractID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) DeleteContract(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_DeleteContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) SystemDelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_SystemDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) SystemUndelete(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_SystemUndelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) CallEthereum(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_CallEthereum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartContractServiceServer is the server API for SmartContractService service.
// All implementations must embed UnimplementedSmartContractServiceServer
// for forward compatibility.
//
// *
// Transactions and queries for the file service.
type SmartContractServiceServer interface {
	// *
	// Creates a contract
	CreateContract(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Updates a contract with the content
	UpdateContract(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Calls a contract
	ContractCallMethod(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Retrieves the contract information
	GetContractInfo(context.Context, *Query) (*Response, error)
	// *
	// Calls a smart contract to be run on a single node
	ContractCallLocalMethod(context.Context, *Query) (*Response, error)
	// *
	// Retrieves the runtime code of a contract
	ContractGetBytecode(context.Context, *Query) (*Response, error)
	// *
	// Retrieves a contract by its Solidity address
	GetBySolidityID(context.Context, *Query) (*Response, error)
	// Deprecated: Do not use.
	// *
	// Always returns an empty record list, as contract accounts are never effective payers for
	// transactions
	GetTxRecordByContractID(context.Context, *Query) (*Response, error)
	// *
	// Deletes a contract instance and transfers any remaining hbars to a specified receiver
	DeleteContract(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Deletes a contract if the submitting account has network admin privileges
	SystemDelete(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Undeletes a contract if the submitting account has network admin privileges
	SystemUndelete(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Ethereum transaction
	CallEthereum(context.Context, *Transaction) (*TransactionResponse, error)
	mustEmbedUnimplementedSmartContractServiceServer()
}

// UnimplementedSmartContractServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmartContractServiceServer struct{}

func (UnimplementedSmartContractServiceServer) CreateContract(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (UnimplementedSmartContractServiceServer) UpdateContract(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (UnimplementedSmartContractServiceServer) ContractCallMethod(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallMethod not implemented")
}
func (UnimplementedSmartContractServiceServer) GetContractInfo(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractInfo not implemented")
}
func (UnimplementedSmartContractServiceServer) ContractCallLocalMethod(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallLocalMethod not implemented")
}
func (UnimplementedSmartContractServiceServer) ContractGetBytecode(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractGetBytecode not implemented")
}
func (UnimplementedSmartContractServiceServer) GetBySolidityID(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySolidityID not implemented")
}
func (UnimplementedSmartContractServiceServer) GetTxRecordByContractID(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxRecordByContractID not implemented")
}
func (UnimplementedSmartContractServiceServer) DeleteContract(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContract not implemented")
}
func (UnimplementedSmartContractServiceServer) SystemDelete(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDelete not implemented")
}
func (UnimplementedSmartContractServiceServer) SystemUndelete(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemUndelete not implemented")
}
func (UnimplementedSmartContractServiceServer) CallEthereum(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEthereum not implemented")
}
func (UnimplementedSmartContractServiceServer) mustEmbedUnimplementedSmartContractServiceServer() {}
func (UnimplementedSmartContractServiceServer) testEmbeddedByValue()                              {}

// UnsafeSmartContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartContractServiceServer will
// result in compilation errors.
type UnsafeSmartContractServiceServer interface {
	mustEmbedUnimplementedSmartContractServiceServer()
}

func RegisterSmartContractServiceServer(s grpc.ServiceRegistrar, srv SmartContractServiceServer) {
	// If the following call pancis, it indicates UnimplementedSmartContractServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmartContractService_ServiceDesc, srv)
}

func _SmartContractService_CreateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).CreateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_CreateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).CreateContract(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_UpdateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).UpdateContract(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ContractCallMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ContractCallMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ContractCallMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ContractCallMethod(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetContractInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetContractInfo(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ContractCallLocalMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ContractCallLocalMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ContractCallLocalMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ContractCallLocalMethod(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ContractGetBytecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ContractGetBytecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ContractGetBytecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ContractGetBytecode(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetBySolidityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetBySolidityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetBySolidityID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetBySolidityID(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetTxRecordByContractID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetTxRecordByContractID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetTxRecordByContractID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetTxRecordByContractID(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_DeleteContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).DeleteContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_DeleteContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).DeleteContract(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_SystemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).SystemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_SystemDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).SystemDelete(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_SystemUndelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).SystemUndelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_SystemUndelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).SystemUndelete(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_CallEthereum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).CallEthereum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_CallEthereum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).CallEthereum(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// SmartContractService_ServiceDesc is the grpc.ServiceDesc for SmartContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmartContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SmartContractService",
	HandlerType: (*SmartContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createContract",
			Handler:    _SmartContractService_CreateContract_Handler,
		},
		{
			MethodName: "updateContract",
			Handler:    _SmartContractService_UpdateContract_Handler,
		},
		{
			MethodName: "contractCallMethod",
			Handler:    _SmartContractService_ContractCallMethod_Handler,
		},
		{
			MethodName: "getContractInfo",
			Handler:    _SmartContractService_GetContractInfo_Handler,
		},
		{
			MethodName: "contractCallLocalMethod",
			Handler:    _SmartContractService_ContractCallLocalMethod_Handler,
		},
		{
			MethodName: "ContractGetBytecode",
			Handler:    _SmartContractService_ContractGetBytecode_Handler,
		},
		{
			MethodName: "getBySolidityID",
			Handler:    _SmartContractService_GetBySolidityID_Handler,
		},
		{
			MethodName: "getTxRecordByContractID",
			Handler:    _SmartContractService_GetTxRecordByContractID_Handler,
		},
		{
			MethodName: "deleteContract",
			Handler:    _SmartContractService_DeleteContract_Handler,
		},
		{
			MethodName: "systemDelete",
			Handler:    _SmartContractService_SystemDelete_Handler,
		},
		{
			MethodName: "systemUndelete",
			Handler:    _SmartContractService_SystemUndelete_Handler,
		},
		{
			MethodName: "callEthereum",
			Handler:    _SmartContractService_CallEthereum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smart_contract_service.proto",
}
