//*
// # Block Stream Info
// Information stored in consensus state at the beginning of each block to
// record the status of the immediately prior block.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in
// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: block_stream_info.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A message stored in state to maintain block stream parameters.<br/>
// Nodes use this information for three purposes.
//  1. To maintain hash chain continuity at restart and reconnect boundaries.
//  1. To store historical hashes for implementation of the EVM `BLOCKHASH`
//     and `PREVRANDAO` opcodes.
//  1. To track the amount of consensus time that has passed between blocks.
//
// This value MUST be updated for every block.<br/>
// This value MUST be transmitted in the "state changes" section of
// _each_ block, but MUST be updated at the beginning of the _next_ block.<br/>
// This value SHALL contain the block hash up to, and including, the
// immediately prior completed block.<br/>
// The state change to update this singleton MUST be the last
// block item in this block.
type BlockStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A block number.<br/>
	// This is the current block number.
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// *
	// A consensus time for the current block.<br/>
	// This is the consensus time of the first round in the current block,
	// and is used to determine if this block was the first across an
	// important boundary in consensus time, such as UTC midnight.
	// This may also be used to purge entities expiring between the last
	// block time and this time.
	BlockTime *Timestamp `protobuf:"bytes,2,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// *
	// A concatenation of hash values.<br/>
	// This combines several trailing output block item hashes and
	// is used as a seed value for a pseudo-random number generator.<br/>
	// This is also required to implement the EVM `PREVRANDAO` opcode.<br/>
	// This MUST contain at least 256 bits of entropy.
	TrailingOutputHashes []byte `protobuf:"bytes,3,opt,name=trailing_output_hashes,json=trailingOutputHashes,proto3" json:"trailing_output_hashes,omitempty"`
	// *
	// A concatenation of hash values.<br/>
	// This field combines up to 256 trailing block hashes.
	// <p>
	// If this message is for block number N, then the earliest available
	// hash SHALL be for block number N-256.<br/>
	// The latest available hash SHALL be for block N-1.<br/>
	// This is REQUIRED to implement the EVM `BLOCKHASH` opcode.
	// <p>
	// ### Field Length
	// Each hash value SHALL be the trailing 265 bits of a SHA2-384 hash.<br/>
	// The length of this field SHALL be an integer multiple of 32 bytes.<br/>
	// This field SHALL be at least 32 bytes.<br/>
	// The maximum length of this field SHALL be 8192 bytes.
	TrailingBlockHashes []byte `protobuf:"bytes,4,opt,name=trailing_block_hashes,json=trailingBlockHashes,proto3" json:"trailing_block_hashes,omitempty"`
	// *
	// A SHA2-384 hash value.<br/>
	// This is the hash of the "input" subtree for this block.
	InputTreeRootHash []byte `protobuf:"bytes,5,opt,name=input_tree_root_hash,json=inputTreeRootHash,proto3" json:"input_tree_root_hash,omitempty"`
	// *
	// A SHA2-384 hash value.<br/>
	// This is the hash of consensus state at the _start_ of this block.
	StartOfBlockStateHash []byte `protobuf:"bytes,6,opt,name=start_of_block_state_hash,json=startOfBlockStateHash,proto3" json:"start_of_block_state_hash,omitempty"`
	// *
	// A count of "output" block items in this block.
	// <p>
	// This SHALL count the number of output block items that _precede_
	// the state change that updates this singleton.
	NumPrecedingOutputItems uint32 `protobuf:"varint,7,opt,name=num_preceding_output_items,json=numPrecedingOutputItems,proto3" json:"num_preceding_output_items,omitempty"`
	// *
	// A concatenation of SHA2-384 hash values.<br/>
	// This is the "rightmost" values of the "output" subtree.
	// <p>
	// The subtree containing these hashes SHALL be constructed from all "output"
	// `BlockItem`s in this block that _precede_ the update to this singleton.
	RightmostPrecedingOutputTreeHashes [][]byte `protobuf:"bytes,8,rep,name=rightmost_preceding_output_tree_hashes,json=rightmostPrecedingOutputTreeHashes,proto3" json:"rightmost_preceding_output_tree_hashes,omitempty"`
	// *
	// A block-end consensus time stamp.
	// <p>
	// This field SHALL hold the last-used consensus time for
	// the current block.
	BlockEndTime *Timestamp `protobuf:"bytes,9,opt,name=block_end_time,json=blockEndTime,proto3" json:"block_end_time,omitempty"`
	// *
	// Whether the post-upgrade work has been done.
	// <p>
	// This MUST be false if and only if the network just restarted
	// after an upgrade and has not yet done the post-upgrade work.
	PostUpgradeWorkDone bool `protobuf:"varint,10,opt,name=post_upgrade_work_done,json=postUpgradeWorkDone,proto3" json:"post_upgrade_work_done,omitempty"`
	// *
	// A version describing the version of application software.
	// <p>
	// This SHALL be the software version that created this block.
	CreationSoftwareVersion *SemanticVersion `protobuf:"bytes,11,opt,name=creation_software_version,json=creationSoftwareVersion,proto3" json:"creation_software_version,omitempty"`
	// *
	// The time stamp at which the last interval process was done.
	// <p>
	// This field SHALL hold the consensus time for the last time
	// at which an interval of time-dependent events were processed.
	LastIntervalProcessTime *Timestamp `protobuf:"bytes,12,opt,name=last_interval_process_time,json=lastIntervalProcessTime,proto3" json:"last_interval_process_time,omitempty"`
	// *
	// The time stamp at which the last user transaction was handled.
	// <p>
	// This field SHALL hold the consensus time for the last time
	// at which a user transaction was handled.
	LastHandleTime *Timestamp `protobuf:"bytes,13,opt,name=last_handle_time,json=lastHandleTime,proto3" json:"last_handle_time,omitempty"`
}

func (x *BlockStreamInfo) Reset() {
	*x = BlockStreamInfo{}
	mi := &file_block_stream_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamInfo) ProtoMessage() {}

func (x *BlockStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_block_stream_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamInfo.ProtoReflect.Descriptor instead.
func (*BlockStreamInfo) Descriptor() ([]byte, []int) {
	return file_block_stream_info_proto_rawDescGZIP(), []int{0}
}

func (x *BlockStreamInfo) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockStreamInfo) GetBlockTime() *Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *BlockStreamInfo) GetTrailingOutputHashes() []byte {
	if x != nil {
		return x.TrailingOutputHashes
	}
	return nil
}

func (x *BlockStreamInfo) GetTrailingBlockHashes() []byte {
	if x != nil {
		return x.TrailingBlockHashes
	}
	return nil
}

func (x *BlockStreamInfo) GetInputTreeRootHash() []byte {
	if x != nil {
		return x.InputTreeRootHash
	}
	return nil
}

func (x *BlockStreamInfo) GetStartOfBlockStateHash() []byte {
	if x != nil {
		return x.StartOfBlockStateHash
	}
	return nil
}

func (x *BlockStreamInfo) GetNumPrecedingOutputItems() uint32 {
	if x != nil {
		return x.NumPrecedingOutputItems
	}
	return 0
}

func (x *BlockStreamInfo) GetRightmostPrecedingOutputTreeHashes() [][]byte {
	if x != nil {
		return x.RightmostPrecedingOutputTreeHashes
	}
	return nil
}

func (x *BlockStreamInfo) GetBlockEndTime() *Timestamp {
	if x != nil {
		return x.BlockEndTime
	}
	return nil
}

func (x *BlockStreamInfo) GetPostUpgradeWorkDone() bool {
	if x != nil {
		return x.PostUpgradeWorkDone
	}
	return false
}

func (x *BlockStreamInfo) GetCreationSoftwareVersion() *SemanticVersion {
	if x != nil {
		return x.CreationSoftwareVersion
	}
	return nil
}

func (x *BlockStreamInfo) GetLastIntervalProcessTime() *Timestamp {
	if x != nil {
		return x.LastIntervalProcessTime
	}
	return nil
}

func (x *BlockStreamInfo) GetLastHandleTime() *Timestamp {
	if x != nil {
		return x.LastHandleTime
	}
	return nil
}

var File_block_stream_info_proto protoreflect.FileDescriptor

var file_block_stream_info_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x1a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x06, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x63, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x52, 0x0a, 0x26, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x6f, 0x73,
	0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x52, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73,
	0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_block_stream_info_proto_rawDescOnce sync.Once
	file_block_stream_info_proto_rawDescData = file_block_stream_info_proto_rawDesc
)

func file_block_stream_info_proto_rawDescGZIP() []byte {
	file_block_stream_info_proto_rawDescOnce.Do(func() {
		file_block_stream_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_block_stream_info_proto_rawDescData)
	})
	return file_block_stream_info_proto_rawDescData
}

var file_block_stream_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_block_stream_info_proto_goTypes = []any{
	(*BlockStreamInfo)(nil), // 0: com.hedera.hapi.node.state.blockstream.BlockStreamInfo
	(*Timestamp)(nil),       // 1: proto.Timestamp
	(*SemanticVersion)(nil), // 2: proto.SemanticVersion
}
var file_block_stream_info_proto_depIdxs = []int32{
	1, // 0: com.hedera.hapi.node.state.blockstream.BlockStreamInfo.block_time:type_name -> proto.Timestamp
	1, // 1: com.hedera.hapi.node.state.blockstream.BlockStreamInfo.block_end_time:type_name -> proto.Timestamp
	2, // 2: com.hedera.hapi.node.state.blockstream.BlockStreamInfo.creation_software_version:type_name -> proto.SemanticVersion
	1, // 3: com.hedera.hapi.node.state.blockstream.BlockStreamInfo.last_interval_process_time:type_name -> proto.Timestamp
	1, // 4: com.hedera.hapi.node.state.blockstream.BlockStreamInfo.last_handle_time:type_name -> proto.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_block_stream_info_proto_init() }
func file_block_stream_info_proto_init() {
	if File_block_stream_info_proto != nil {
		return
	}
	file_timestamp_proto_init()
	file_basic_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_block_stream_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_block_stream_info_proto_goTypes,
		DependencyIndexes: file_block_stream_info_proto_depIdxs,
		MessageInfos:      file_block_stream_info_proto_msgTypes,
	}.Build()
	File_block_stream_info_proto = out.File
	file_block_stream_info_proto_rawDesc = nil
	file_block_stream_info_proto_goTypes = nil
	file_block_stream_info_proto_depIdxs = nil
}
