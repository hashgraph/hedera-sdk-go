// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: address_book_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AddressBookService_CreateNode_FullMethodName = "/proto.AddressBookService/createNode"
	AddressBookService_DeleteNode_FullMethodName = "/proto.AddressBookService/deleteNode"
	AddressBookService_UpdateNode_FullMethodName = "/proto.AddressBookService/updateNode"
)

// AddressBookServiceClient is the client API for AddressBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// The Address Book service provides the ability for Hedera network node
// administrators to add, update, and remove consensus nodes. This addition,
// update, or removal of a consensus node requires governing council approval,
// but each node operator may update their own operational attributes without
// additional approval, reducing overhead for routine operations.
//
// Most operations are `privileged operations` and require governing council
// approval.
//
// ### For a node creation transaction.
// - The node operator SHALL create a `createNode` transaction.
//   - The node operator SHALL sign this transaction with the active `key` for
//     the account to be assigned as the "node account".
//   - The node operator MUST deliver the signed transaction to the Hedera
//     council representative.
//   - The Hedera council representative SHALL arrange for council members to
//     review and sign the transaction.
//   - Once sufficient council members have signed the transaction, the
//     Hedera council representative SHALL submit the transaction to the
//     network.
//   - Upon receipt of a valid and signed node creation transaction the network
//     software SHALL
//   - Validate the threshold signature for the Hedera governing council
//   - Validate the signature of the active `key` for the account to be
//     assigned as the "node account".
//   - Create the new node in state, this new node SHALL NOT be active in the
//     network at this time.
//   - When executing the next `freeze` transaction with `freeze_type` set to
//     `PREPARE_UPGRADE`, update network configuration and bring the
//     new node to an active status within the network. The node to be added
//     SHALL be active in the network following this upgrade.
//
// ### For a node deletion transaction.
//   - The node operator or Hedera council representative SHALL create a
//     `deleteNode` transaction.
//   - If the node operator creates the transaction
//   - The node operator MUST sign this transaction with the active `key`
//     for the account assigned as the "node account".
//   - The node operator SHALL deliver the signed transaction to the Hedera
//     council representative.
//   - The Hedera council representative SHALL arrange for council members to
//     review and sign the transaction.
//   - Once sufficient council members have signed the transaction, the
//     Hedera council representative SHALL submit the transaction to the
//     network.
//   - Upon receipt of a valid and signed node deletion transaction the network
//     software SHALL
//   - Validate the threshold signature for the Hedera governing council
//   - Remove the existing node from network state. The node SHALL still
//     be active in the network at this time.
//   - When executing the next `freeze` transaction with `freeze_type` set to
//     `PREPARE_UPGRADE`, update network configuration and remove the
//     node to be deleted from the network. The node to be deleted SHALL NOT
//     be active in the network following this upgrade.
//
// ### For a node update transaction.
// - The node operator SHALL create an `updateNode` transaction.
//   - The node operator MUST sign this transaction with the active `key`
//     assigned as the `admin_key`.
//   - The node operator SHALL submit the transaction to the
//     network.  Hedera council approval SHALL NOT be sought for this
//     transaction
//   - Upon receipt of a valid and signed node update transaction the network
//     software SHALL
//   - If the transaction modifies the value of the "node account",
//   - Validate the signature of the active `key` for the account
//     assigned as the _current_ "node account".
//   - Validate the signature of the active `key` for the account to be
//     assigned as the _new_ "node account".
//   - Modify the node information held in network state with the changes
//     requested in the update transaction. The node changes SHALL NOT be
//     applied to network configuration, and SHALL NOT affect network
//     operation at this time.
//   - When executing the next `freeze` transaction with `freeze_type` set to
//     `PREPARE_UPGRADE`, update network configuration according to the
//     modified information in network state. The requested changes SHALL
//     affect network operation following this upgrade.
type AddressBookServiceClient interface {
	// *
	// A transaction to create a new consensus node in the network.
	// address book.
	// <p>
	// This transaction, once complete, SHALL add a new consensus node to the
	// network state.<br/>
	// The new consensus node SHALL remain in state, but SHALL NOT participate
	// in network consensus until the network updates the network configuration.
	// <p>
	// Hedera governing council authorization is REQUIRED for this transaction.
	CreateNode(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// A transaction to remove a consensus node from the network address
	// book.
	// <p>
	// This transaction, once complete, SHALL remove the identified consensus
	// node from the network state.
	// <p>
	// Hedera governing council authorization is REQUIRED for this transaction.
	DeleteNode(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// A transaction to update an existing consensus node from the network
	// address book.
	// <p>
	// This transaction, once complete, SHALL modify the identified consensus
	// node state as requested.
	// <p>
	// This transaction is authorized by the node operator
	UpdateNode(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type addressBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressBookServiceClient(cc grpc.ClientConnInterface) AddressBookServiceClient {
	return &addressBookServiceClient{cc}
}

func (c *addressBookServiceClient) CreateNode(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, AddressBookService_CreateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookServiceClient) DeleteNode(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, AddressBookService_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookServiceClient) UpdateNode(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, AddressBookService_UpdateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressBookServiceServer is the server API for AddressBookService service.
// All implementations must embed UnimplementedAddressBookServiceServer
// for forward compatibility.
//
// *
// The Address Book service provides the ability for Hedera network node
// administrators to add, update, and remove consensus nodes. This addition,
// update, or removal of a consensus node requires governing council approval,
// but each node operator may update their own operational attributes without
// additional approval, reducing overhead for routine operations.
//
// Most operations are `privileged operations` and require governing council
// approval.
//
// ### For a node creation transaction.
// - The node operator SHALL create a `createNode` transaction.
//   - The node operator SHALL sign this transaction with the active `key` for
//     the account to be assigned as the "node account".
//   - The node operator MUST deliver the signed transaction to the Hedera
//     council representative.
//   - The Hedera council representative SHALL arrange for council members to
//     review and sign the transaction.
//   - Once sufficient council members have signed the transaction, the
//     Hedera council representative SHALL submit the transaction to the
//     network.
//   - Upon receipt of a valid and signed node creation transaction the network
//     software SHALL
//   - Validate the threshold signature for the Hedera governing council
//   - Validate the signature of the active `key` for the account to be
//     assigned as the "node account".
//   - Create the new node in state, this new node SHALL NOT be active in the
//     network at this time.
//   - When executing the next `freeze` transaction with `freeze_type` set to
//     `PREPARE_UPGRADE`, update network configuration and bring the
//     new node to an active status within the network. The node to be added
//     SHALL be active in the network following this upgrade.
//
// ### For a node deletion transaction.
//   - The node operator or Hedera council representative SHALL create a
//     `deleteNode` transaction.
//   - If the node operator creates the transaction
//   - The node operator MUST sign this transaction with the active `key`
//     for the account assigned as the "node account".
//   - The node operator SHALL deliver the signed transaction to the Hedera
//     council representative.
//   - The Hedera council representative SHALL arrange for council members to
//     review and sign the transaction.
//   - Once sufficient council members have signed the transaction, the
//     Hedera council representative SHALL submit the transaction to the
//     network.
//   - Upon receipt of a valid and signed node deletion transaction the network
//     software SHALL
//   - Validate the threshold signature for the Hedera governing council
//   - Remove the existing node from network state. The node SHALL still
//     be active in the network at this time.
//   - When executing the next `freeze` transaction with `freeze_type` set to
//     `PREPARE_UPGRADE`, update network configuration and remove the
//     node to be deleted from the network. The node to be deleted SHALL NOT
//     be active in the network following this upgrade.
//
// ### For a node update transaction.
// - The node operator SHALL create an `updateNode` transaction.
//   - The node operator MUST sign this transaction with the active `key`
//     assigned as the `admin_key`.
//   - The node operator SHALL submit the transaction to the
//     network.  Hedera council approval SHALL NOT be sought for this
//     transaction
//   - Upon receipt of a valid and signed node update transaction the network
//     software SHALL
//   - If the transaction modifies the value of the "node account",
//   - Validate the signature of the active `key` for the account
//     assigned as the _current_ "node account".
//   - Validate the signature of the active `key` for the account to be
//     assigned as the _new_ "node account".
//   - Modify the node information held in network state with the changes
//     requested in the update transaction. The node changes SHALL NOT be
//     applied to network configuration, and SHALL NOT affect network
//     operation at this time.
//   - When executing the next `freeze` transaction with `freeze_type` set to
//     `PREPARE_UPGRADE`, update network configuration according to the
//     modified information in network state. The requested changes SHALL
//     affect network operation following this upgrade.
type AddressBookServiceServer interface {
	// *
	// A transaction to create a new consensus node in the network.
	// address book.
	// <p>
	// This transaction, once complete, SHALL add a new consensus node to the
	// network state.<br/>
	// The new consensus node SHALL remain in state, but SHALL NOT participate
	// in network consensus until the network updates the network configuration.
	// <p>
	// Hedera governing council authorization is REQUIRED for this transaction.
	CreateNode(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// A transaction to remove a consensus node from the network address
	// book.
	// <p>
	// This transaction, once complete, SHALL remove the identified consensus
	// node from the network state.
	// <p>
	// Hedera governing council authorization is REQUIRED for this transaction.
	DeleteNode(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// A transaction to update an existing consensus node from the network
	// address book.
	// <p>
	// This transaction, once complete, SHALL modify the identified consensus
	// node state as requested.
	// <p>
	// This transaction is authorized by the node operator
	UpdateNode(context.Context, *Transaction) (*TransactionResponse, error)
	mustEmbedUnimplementedAddressBookServiceServer()
}

// UnimplementedAddressBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddressBookServiceServer struct{}

func (UnimplementedAddressBookServiceServer) CreateNode(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedAddressBookServiceServer) DeleteNode(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedAddressBookServiceServer) UpdateNode(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedAddressBookServiceServer) mustEmbedUnimplementedAddressBookServiceServer() {}
func (UnimplementedAddressBookServiceServer) testEmbeddedByValue()                            {}

// UnsafeAddressBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressBookServiceServer will
// result in compilation errors.
type UnsafeAddressBookServiceServer interface {
	mustEmbedUnimplementedAddressBookServiceServer()
}

func RegisterAddressBookServiceServer(s grpc.ServiceRegistrar, srv AddressBookServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddressBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddressBookService_ServiceDesc, srv)
}

func _AddressBookService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressBookService_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServiceServer).CreateNode(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBookService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressBookService_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServiceServer).DeleteNode(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBookService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressBookService_UpdateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServiceServer).UpdateNode(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressBookService_ServiceDesc is the grpc.ServiceDesc for AddressBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AddressBookService",
	HandlerType: (*AddressBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNode",
			Handler:    _AddressBookService_CreateNode_Handler,
		},
		{
			MethodName: "deleteNode",
			Handler:    _AddressBookService_DeleteNode_Handler,
		},
		{
			MethodName: "updateNode",
			Handler:    _AddressBookService_UpdateNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address_book_service.proto",
}
