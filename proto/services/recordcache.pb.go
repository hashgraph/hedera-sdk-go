//*
// # Record Cache
// The Record Cache holds transaction records for a short time, and is the
// source for responses to `transactionGetRecord` and `transactionGetReceipt`
// queries.
//
// ### Keywords
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119)
// and clarified in [RFC8174](https://www.ietf.org/rfc/rfc8174).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: recordcache.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// As transactions are handled and records and receipts are created, they are
// stored in state for a configured time period (for example, 3 minutes).
// During this time, any client can query the node and get the record or receipt
// for the transaction. The `TransactionRecordEntry` is the object stored in
// state with this information.
type TransactionRecordEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A node identifier.<br/>
	// This identifier is the node, as known to the address book, that
	// submitted the transaction for consensus.
	// <p>
	// This SHALL be a whole number.
	NodeId int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// *
	// An Account identifier for the payer for the transaction.
	// <p>
	// This MAY be the same as the account ID within the Transaction ID of the
	// record, or it MAY be the account ID of the node that submitted the
	// transaction to consensus if the account ID in the Transaction ID was
	// not able to pay.
	PayerAccountId *AccountID `protobuf:"bytes,2,opt,name=payer_account_id,json=payerAccountId,proto3" json:"payer_account_id,omitempty"`
	// *
	// A transaction record for the transaction.
	TransactionRecord *TransactionRecord `protobuf:"bytes,3,opt,name=transaction_record,json=transactionRecord,proto3" json:"transaction_record,omitempty"`
}

func (x *TransactionRecordEntry) Reset() {
	*x = TransactionRecordEntry{}
	mi := &file_recordcache_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRecordEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRecordEntry) ProtoMessage() {}

func (x *TransactionRecordEntry) ProtoReflect() protoreflect.Message {
	mi := &file_recordcache_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRecordEntry.ProtoReflect.Descriptor instead.
func (*TransactionRecordEntry) Descriptor() ([]byte, []int) {
	return file_recordcache_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionRecordEntry) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TransactionRecordEntry) GetPayerAccountId() *AccountID {
	if x != nil {
		return x.PayerAccountId
	}
	return nil
}

func (x *TransactionRecordEntry) GetTransactionRecord() *TransactionRecord {
	if x != nil {
		return x.TransactionRecord
	}
	return nil
}

// *
// An entry in the record cache with the receipt for a transaction.
// This is the entry stored in state that enables returning the receipt
// information when queried by clients.
//
// When a transaction is handled a receipt SHALL be created.<br/>
// This receipt MUST be stored in state for a configured time limit
// (e.g. 3 minutes).<br/>
// While a receipt is stored, a client MAY query the node and retrieve
// the receipt.
type TransactionReceiptEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A node identifier.<br/>
	// This identifies the node that submitted the transaction to consensus.
	// The value is the identifier as known to the current address book.
	// <p>
	// Valid node identifiers SHALL be between 0 and <tt>2<sup>63-1</sup></tt>,
	// inclusive.
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// *
	// A transaction identifier.<br/>
	// This identifies the submitted transaction for this receipt.
	TransactionId *TransactionID `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// *
	// A status result.<br/>
	// This is the final status after handling the transaction.
	Status ResponseCodeEnum `protobuf:"varint,3,opt,name=status,proto3,enum=proto.ResponseCodeEnum" json:"status,omitempty"`
}

func (x *TransactionReceiptEntry) Reset() {
	*x = TransactionReceiptEntry{}
	mi := &file_recordcache_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionReceiptEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceiptEntry) ProtoMessage() {}

func (x *TransactionReceiptEntry) ProtoReflect() protoreflect.Message {
	mi := &file_recordcache_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceiptEntry.ProtoReflect.Descriptor instead.
func (*TransactionReceiptEntry) Descriptor() ([]byte, []int) {
	return file_recordcache_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionReceiptEntry) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TransactionReceiptEntry) GetTransactionId() *TransactionID {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionReceiptEntry) GetStatus() ResponseCodeEnum {
	if x != nil {
		return x.Status
	}
	return ResponseCodeEnum_OK
}

// *
// A cache of transaction receipts.<br/>
// As transactions are handled and receipts are created, they are stored in
// state for a configured time limit (perhaps, for example, 3 minutes).
// During this time window, any client can query the node and get the receipt
// for the transaction. The `TransactionReceiptEntries` is the object stored in
// state with this information.
//
// This message SHALL contain a list of `TransactionReceiptEntry` objects.
type TransactionReceiptEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*TransactionReceiptEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *TransactionReceiptEntries) Reset() {
	*x = TransactionReceiptEntries{}
	mi := &file_recordcache_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionReceiptEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceiptEntries) ProtoMessage() {}

func (x *TransactionReceiptEntries) ProtoReflect() protoreflect.Message {
	mi := &file_recordcache_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceiptEntries.ProtoReflect.Descriptor instead.
func (*TransactionReceiptEntries) Descriptor() ([]byte, []int) {
	return file_recordcache_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionReceiptEntries) GetEntries() []*TransactionReceiptEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_recordcache_proto protoreflect.FileDescriptor

var file_recordcache_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42,
	0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73,
	0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recordcache_proto_rawDescOnce sync.Once
	file_recordcache_proto_rawDescData = file_recordcache_proto_rawDesc
)

func file_recordcache_proto_rawDescGZIP() []byte {
	file_recordcache_proto_rawDescOnce.Do(func() {
		file_recordcache_proto_rawDescData = protoimpl.X.CompressGZIP(file_recordcache_proto_rawDescData)
	})
	return file_recordcache_proto_rawDescData
}

var file_recordcache_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_recordcache_proto_goTypes = []any{
	(*TransactionRecordEntry)(nil),    // 0: proto.TransactionRecordEntry
	(*TransactionReceiptEntry)(nil),   // 1: proto.TransactionReceiptEntry
	(*TransactionReceiptEntries)(nil), // 2: proto.TransactionReceiptEntries
	(*AccountID)(nil),                 // 3: proto.AccountID
	(*TransactionRecord)(nil),         // 4: proto.TransactionRecord
	(*TransactionID)(nil),             // 5: proto.TransactionID
	(ResponseCodeEnum)(0),             // 6: proto.ResponseCodeEnum
}
var file_recordcache_proto_depIdxs = []int32{
	3, // 0: proto.TransactionRecordEntry.payer_account_id:type_name -> proto.AccountID
	4, // 1: proto.TransactionRecordEntry.transaction_record:type_name -> proto.TransactionRecord
	5, // 2: proto.TransactionReceiptEntry.transaction_id:type_name -> proto.TransactionID
	6, // 3: proto.TransactionReceiptEntry.status:type_name -> proto.ResponseCodeEnum
	1, // 4: proto.TransactionReceiptEntries.entries:type_name -> proto.TransactionReceiptEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_recordcache_proto_init() }
func file_recordcache_proto_init() {
	if File_recordcache_proto != nil {
		return
	}
	file_basic_types_proto_init()
	file_transaction_record_proto_init()
	file_response_code_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recordcache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recordcache_proto_goTypes,
		DependencyIndexes: file_recordcache_proto_depIdxs,
		MessageInfos:      file_recordcache_proto_msgTypes,
	}.Build()
	File_recordcache_proto = out.File
	file_recordcache_proto_rawDesc = nil
	file_recordcache_proto_goTypes = nil
	file_recordcache_proto_depIdxs = nil
}
