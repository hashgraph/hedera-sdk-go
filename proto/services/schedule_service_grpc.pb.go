// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: schedule_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScheduleService_CreateSchedule_FullMethodName  = "/proto.ScheduleService/createSchedule"
	ScheduleService_SignSchedule_FullMethodName    = "/proto.ScheduleService/signSchedule"
	ScheduleService_DeleteSchedule_FullMethodName  = "/proto.ScheduleService/deleteSchedule"
	ScheduleService_GetScheduleInfo_FullMethodName = "/proto.ScheduleService/getScheduleInfo"
)

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Transactions and queries for the Schedule Service
//
// The Schedule Service allows transactions to be submitted without all the required signatures and
// allows anyone to provide the required signatures independently after a transaction has already
// been created. The transactions can be executed immediately when all required signatures are received
// or at a future date if Long Term Scheduled Transactions are enabled.
//
// Execution:
//
// Scheduled Transactions are executed in two different modes.
//
//  1. If Long Term Scheduled Transactions are enabled and <tt>wait_for_expiry</tt> was set to <tt>true</tt> on the
//     <tt>ScheduleCreate</tt>, then the transaction will be executed at the <tt>expiration_time</tt> specified on the
//     <tt>ScheduleCreate</tt>.
//
//  2. Otherwise Scheduled Transactions are executed once all required signatures are collected and witnessed.
//     Every time new signature is provided, a check is performed on the "readiness" of the execution.
//     The Scheduled Transaction will be executed immediately after the transaction that triggered it.
//
// NOTICE:
// A Scheduled Transaction being ready to execute, or even not ready to execute, at the time a <tt>ScheduleCreate</tt> or
// <tt>ScheduleSign</tt> comes in does not guarantee it will stay that way. Any number of things can happen over time that
// impact the transaction.
//
// For example, account keys can change, accounts can be deleted, and account balances can change.
//
// A particularly noteworthy case is if Long Term Scheduled Transactions are enabled and signature requirements for a Scheduled
// Transaction change such that existing signatures become sufficient to allow the transaction to go through. In this case the transaction
// will execute at expiration_time unless a ScheduleSign comes in to push it through.
//
// Transaction Record:
//
// If a Scheduled Transaction is executed immediately following the transaction that provided all required signatures,
// the timestamp of the Scheduled Transaction will be equal to consensusTimestamp + 1 nano, where
// consensusTimestamp is the timestamp of the transaction that triggered the execution.
//
// The Transaction ID of the Scheduled Transaction will have the scheduled property set to true and
// inherit the <tt>transactionValidStart</tt> and <tt>accountID</tt> from the <tt>ScheduleCreate</tt> transaction.
//
// The <tt>scheduleRef</tt> property of the transaction record will be populated with the <tt>ScheduleID</tt> of the
// Scheduled Transaction.
//
// Post execution:
//
// After execution, a Scheduled Transaction will remain in state and can be queried using <tt>GetScheduleInfo</tt> until expiration.
//
// Expiry:
//
// The expiration time of a schedule is controlled by it's <tt>expiration_time</tt>. If Long Term Scheduled Transactions are disabled,
// the <tt>expiration_time</tt> is always 30 minutes in the future.
//
// Once a given Scheduled Transaction expires, it will be removed from the ledger and any upcoming
// operation referring the ScheduleID will resolve to INVALID_SCHEDULE_ID.
type ScheduleServiceClient interface {
	// *
	// Creates a new Schedule by submitting the transaction
	CreateSchedule(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Signs a new Schedule by submitting the transaction
	SignSchedule(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Deletes a new Schedule by submitting the transaction
	DeleteSchedule(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	// *
	// Retrieves the metadata of a schedule entity
	GetScheduleInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) CreateSchedule(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, ScheduleService_CreateSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) SignSchedule(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, ScheduleService_SignSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteSchedule(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, ScheduleService_DeleteSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetScheduleInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ScheduleService_GetScheduleInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility.
//
// *
// Transactions and queries for the Schedule Service
//
// The Schedule Service allows transactions to be submitted without all the required signatures and
// allows anyone to provide the required signatures independently after a transaction has already
// been created. The transactions can be executed immediately when all required signatures are received
// or at a future date if Long Term Scheduled Transactions are enabled.
//
// Execution:
//
// Scheduled Transactions are executed in two different modes.
//
//  1. If Long Term Scheduled Transactions are enabled and <tt>wait_for_expiry</tt> was set to <tt>true</tt> on the
//     <tt>ScheduleCreate</tt>, then the transaction will be executed at the <tt>expiration_time</tt> specified on the
//     <tt>ScheduleCreate</tt>.
//
//  2. Otherwise Scheduled Transactions are executed once all required signatures are collected and witnessed.
//     Every time new signature is provided, a check is performed on the "readiness" of the execution.
//     The Scheduled Transaction will be executed immediately after the transaction that triggered it.
//
// NOTICE:
// A Scheduled Transaction being ready to execute, or even not ready to execute, at the time a <tt>ScheduleCreate</tt> or
// <tt>ScheduleSign</tt> comes in does not guarantee it will stay that way. Any number of things can happen over time that
// impact the transaction.
//
// For example, account keys can change, accounts can be deleted, and account balances can change.
//
// A particularly noteworthy case is if Long Term Scheduled Transactions are enabled and signature requirements for a Scheduled
// Transaction change such that existing signatures become sufficient to allow the transaction to go through. In this case the transaction
// will execute at expiration_time unless a ScheduleSign comes in to push it through.
//
// Transaction Record:
//
// If a Scheduled Transaction is executed immediately following the transaction that provided all required signatures,
// the timestamp of the Scheduled Transaction will be equal to consensusTimestamp + 1 nano, where
// consensusTimestamp is the timestamp of the transaction that triggered the execution.
//
// The Transaction ID of the Scheduled Transaction will have the scheduled property set to true and
// inherit the <tt>transactionValidStart</tt> and <tt>accountID</tt> from the <tt>ScheduleCreate</tt> transaction.
//
// The <tt>scheduleRef</tt> property of the transaction record will be populated with the <tt>ScheduleID</tt> of the
// Scheduled Transaction.
//
// Post execution:
//
// After execution, a Scheduled Transaction will remain in state and can be queried using <tt>GetScheduleInfo</tt> until expiration.
//
// Expiry:
//
// The expiration time of a schedule is controlled by it's <tt>expiration_time</tt>. If Long Term Scheduled Transactions are disabled,
// the <tt>expiration_time</tt> is always 30 minutes in the future.
//
// Once a given Scheduled Transaction expires, it will be removed from the ledger and any upcoming
// operation referring the ScheduleID will resolve to INVALID_SCHEDULE_ID.
type ScheduleServiceServer interface {
	// *
	// Creates a new Schedule by submitting the transaction
	CreateSchedule(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Signs a new Schedule by submitting the transaction
	SignSchedule(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Deletes a new Schedule by submitting the transaction
	DeleteSchedule(context.Context, *Transaction) (*TransactionResponse, error)
	// *
	// Retrieves the metadata of a schedule entity
	GetScheduleInfo(context.Context, *Query) (*Response, error)
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScheduleServiceServer struct{}

func (UnimplementedScheduleServiceServer) CreateSchedule(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) SignSchedule(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteSchedule(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) GetScheduleInfo(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleInfo not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}
func (UnimplementedScheduleServiceServer) testEmbeddedByValue()                         {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	// If the following call pancis, it indicates UnimplementedScheduleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CreateSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_SignSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).SignSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_SignSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).SignSchedule(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_DeleteSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteSchedule(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetScheduleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetScheduleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetScheduleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetScheduleInfo(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSchedule",
			Handler:    _ScheduleService_CreateSchedule_Handler,
		},
		{
			MethodName: "signSchedule",
			Handler:    _ScheduleService_SignSchedule_Handler,
		},
		{
			MethodName: "deleteSchedule",
			Handler:    _ScheduleService_DeleteSchedule_Handler,
		},
		{
			MethodName: "getScheduleInfo",
			Handler:    _ScheduleService_GetScheduleInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule_service.proto",
}
