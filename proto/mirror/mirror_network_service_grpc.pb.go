// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: mirror/mirror_network_service.proto

package mirror

import (
	context "context"
	services "github.com/hiero-ledger/hiero-sdk-go/v2/proto/services"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// Query for an address book and return its nodes. The nodes are returned in ascending order by node ID. The
	// response is not guaranteed to be a byte-for-byte equivalent to the NodeAddress in the Hedera file on
	// the network since it is reconstructed from a normalized database table.
	GetNodes(ctx context.Context, in *AddressBookQuery, opts ...grpc.CallOption) (NetworkService_GetNodesClient, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetNodes(ctx context.Context, in *AddressBookQuery, opts ...grpc.CallOption) (NetworkService_GetNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkService_ServiceDesc.Streams[0], "/com.hedera.mirror.api.proto.NetworkService/getNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceGetNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkService_GetNodesClient interface {
	Recv() (*services.NodeAddress, error)
	grpc.ClientStream
}

type networkServiceGetNodesClient struct {
	grpc.ClientStream
}

func (x *networkServiceGetNodesClient) Recv() (*services.NodeAddress, error) {
	m := new(services.NodeAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
type NetworkServiceServer interface {
	// Query for an address book and return its nodes. The nodes are returned in ascending order by node ID. The
	// response is not guaranteed to be a byte-for-byte equivalent to the NodeAddress in the Hedera file on
	// the network since it is reconstructed from a normalized database table.
	GetNodes(*AddressBookQuery, NetworkService_GetNodesServer) error
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) GetNodes(*AddressBookQuery, NetworkService_GetNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_GetNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddressBookQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceServer).GetNodes(m, &networkServiceGetNodesServer{stream})
}

type NetworkService_GetNodesServer interface {
	Send(*services.NodeAddress) error
	grpc.ServerStream
}

type networkServiceGetNodesServer struct {
	grpc.ServerStream
}

func (x *networkServiceGetNodesServer) Send(m *services.NodeAddress) error {
	return x.ServerStream.SendMsg(m)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.hedera.mirror.api.proto.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getNodes",
			Handler:       _NetworkService_GetNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mirror/mirror_network_service.proto",
}
